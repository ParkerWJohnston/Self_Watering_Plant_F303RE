
Self_Watering_Plant_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005c4c  08005c4c  00015c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce4  08005ce4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005ce4  08005ce4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ce4  08005ce4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ce4  08005ce4  00015ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ce8  08005ce8  00015ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000070  08005d5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08005d5c  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd62  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ad8  00000000  00000000  0002ce02  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  0002e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e8  00000000  00000000  0002f3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d724  00000000  00000000  0002fd98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a547  00000000  00000000  0004d4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b102f  00000000  00000000  00057a03  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00108a32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030cc  00000000  00000000  00108ab0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c34 	.word	0x08005c34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005c34 	.word	0x08005c34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b08f      	sub	sp, #60	; 0x3c
 8000ad0:	af02      	add	r7, sp, #8
	uint8_t buf[12];
	int16_t val;
	float temp_c;
	uint16_t raw;
	char msg[10];
	bool watering = false;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	const int minDrynessVal = 200;
 8000ad8:	23c8      	movs	r3, #200	; 0xc8
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000adc:	f000 fbf4 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae0:	f000 f8de 	bl	8000ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae4:	f000 fa1e 	bl	8000f24 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ae8:	f000 f93c 	bl	8000d64 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000aec:	f000 f9aa 	bl	8000e44 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000af0:	f000 f9e8 	bl	8000ec4 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  buf[0] = REG_TEMP;
 8000af4:	2300      	movs	r3, #0
 8000af6:	743b      	strb	r3, [r7, #16]
	  ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 8000af8:	2390      	movs	r3, #144	; 0x90
 8000afa:	b299      	uxth	r1, r3
 8000afc:	f107 0210 	add.w	r2, r7, #16
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2301      	movs	r3, #1
 8000b08:	485b      	ldr	r0, [pc, #364]	; (8000c78 <main+0x1ac>)
 8000b0a:	f002 f831 	bl	8002b70 <HAL_I2C_Master_Transmit>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if ( ret != HAL_OK ) {
 8000b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d009      	beq.n	8000b30 <main+0x64>
	       strcpy((char*)buf, "Error Tx\r\n");
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	4a56      	ldr	r2, [pc, #344]	; (8000c7c <main+0x1b0>)
 8000b22:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b24:	c303      	stmia	r3!, {r0, r1}
 8000b26:	801a      	strh	r2, [r3, #0]
 8000b28:	3302      	adds	r3, #2
 8000b2a:	0c12      	lsrs	r2, r2, #16
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	e067      	b.n	8000c00 <main+0x134>
	     } else {

	       // Read 2 bytes from the temperature register
	       ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 8000b30:	2390      	movs	r3, #144	; 0x90
 8000b32:	b299      	uxth	r1, r3
 8000b34:	f107 0210 	add.w	r2, r7, #16
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2302      	movs	r3, #2
 8000b40:	484d      	ldr	r0, [pc, #308]	; (8000c78 <main+0x1ac>)
 8000b42:	f002 f909 	bl	8002d58 <HAL_I2C_Master_Receive>
 8000b46:	4603      	mov	r3, r0
 8000b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	       if ( ret != HAL_OK ) {
 8000b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d009      	beq.n	8000b68 <main+0x9c>
	         strcpy((char*)buf, "Error Rx\r\n");
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4a49      	ldr	r2, [pc, #292]	; (8000c80 <main+0x1b4>)
 8000b5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b5c:	c303      	stmia	r3!, {r0, r1}
 8000b5e:	801a      	strh	r2, [r3, #0]
 8000b60:	3302      	adds	r3, #2
 8000b62:	0c12      	lsrs	r2, r2, #16
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	e04b      	b.n	8000c00 <main+0x134>
	       } else {

	         //Combine the bytes
	         val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 8000b68:	7c3b      	ldrb	r3, [r7, #16]
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	b21a      	sxth	r2, r3
 8000b6e:	7c7b      	ldrb	r3, [r7, #17]
 8000b70:	091b      	lsrs	r3, r3, #4
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	85fb      	strh	r3, [r7, #46]	; 0x2e

	         // Convert to 2's complement, since temperature can be negative
	         if ( val > 0x7FF ) {
 8000b7a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b82:	db05      	blt.n	8000b90 <main+0xc4>
	           val |= 0xF000;
 8000b84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000b86:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000b8a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000b8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	         }

	         // Convert to float temperature value (Celsius)
	         temp_c = val * 0.0625;
 8000b90:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fccd 	bl	8000534 <__aeabi_i2d>
 8000b9a:	f04f 0200 	mov.w	r2, #0
 8000b9e:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <main+0x1b8>)
 8000ba0:	f7ff fd32 	bl	8000608 <__aeabi_dmul>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	460c      	mov	r4, r1
 8000ba8:	4618      	mov	r0, r3
 8000baa:	4621      	mov	r1, r4
 8000bac:	f7ff ff3e 	bl	8000a2c <__aeabi_d2f>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	623b      	str	r3, [r7, #32]

	         // Convert temperature to decimal format
	         temp_c *= 100;
 8000bb4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bb8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000c88 <main+0x1bc>
 8000bbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc0:	edc7 7a08 	vstr	s15, [r7, #32]
	         sprintf((char*)buf,
	               "%u.%u C\r\n",
	               ((unsigned int)temp_c / 100),
 8000bc4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bcc:	ee17 2a90 	vmov	r2, s15
	         sprintf((char*)buf,
 8000bd0:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <main+0x1c0>)
 8000bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8000bd6:	095c      	lsrs	r4, r3, #5
	               ((unsigned int)temp_c % 100));
 8000bd8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000be0:	ee17 2a90 	vmov	r2, s15
	         sprintf((char*)buf,
 8000be4:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <main+0x1c0>)
 8000be6:	fba3 1302 	umull	r1, r3, r3, r2
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2164      	movs	r1, #100	; 0x64
 8000bee:	fb01 f303 	mul.w	r3, r1, r3
 8000bf2:	1ad3      	subs	r3, r2, r3
 8000bf4:	f107 0010 	add.w	r0, r7, #16
 8000bf8:	4622      	mov	r2, r4
 8000bfa:	4925      	ldr	r1, [pc, #148]	; (8000c90 <main+0x1c4>)
 8000bfc:	f004 fc14 	bl	8005428 <siprintf>
	       }
	     }

	     // Send out buffer (temperature or error message)
	     HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff faeb 	bl	80001e0 <strlen>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	f107 0110 	add.w	r1, r7, #16
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	481f      	ldr	r0, [pc, #124]	; (8000c94 <main+0x1c8>)
 8000c18:	f003 ffc4 	bl	8004ba4 <HAL_UART_Transmit>

	     // Wait
	     HAL_Delay(500);
 8000c1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c20:	f000 fbb8 	bl	8001394 <HAL_Delay>

	     //Get ADC Value
	     HAL_ADC_Start(&hadc1);
 8000c24:	481c      	ldr	r0, [pc, #112]	; (8000c98 <main+0x1cc>)
 8000c26:	f000 fdd1 	bl	80017cc <HAL_ADC_Start>
	     HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2e:	481a      	ldr	r0, [pc, #104]	; (8000c98 <main+0x1cc>)
 8000c30:	f000 fee2 	bl	80019f8 <HAL_ADC_PollForConversion>
	     raw = HAL_ADC_GetValue(&hadc1);
 8000c34:	4818      	ldr	r0, [pc, #96]	; (8000c98 <main+0x1cc>)
 8000c36:	f000 ffd9 	bl	8001bec <HAL_ADC_GetValue>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	83fb      	strh	r3, [r7, #30]

	     //Convert to string and print
	     sprintf(msg, "%hu\r\n", raw);
 8000c3e:	8bfa      	ldrh	r2, [r7, #30]
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	4916      	ldr	r1, [pc, #88]	; (8000c9c <main+0x1d0>)
 8000c44:	4618      	mov	r0, r3
 8000c46:	f004 fbef 	bl	8005428 <siprintf>
	     HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fac7 	bl	80001e0 <strlen>
 8000c52:	4603      	mov	r3, r0
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	1d39      	adds	r1, r7, #4
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <main+0x1c8>)
 8000c5e:	f003 ffa1 	bl	8004ba4 <HAL_UART_Transmit>
	     HAL_Delay(500);
 8000c62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c66:	f000 fb95 	bl	8001394 <HAL_Delay>

	     if(!watering || raw < minDrynessVal) {
 8000c6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000c6e:	f083 0301 	eor.w	r3, r3, #1
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
	  buf[0] = REG_TEMP;
 8000c76:	e73d      	b.n	8000af4 <main+0x28>
 8000c78:	20000098 	.word	0x20000098
 8000c7c:	08005c4c 	.word	0x08005c4c
 8000c80:	08005c58 	.word	0x08005c58
 8000c84:	3fb00000 	.word	0x3fb00000
 8000c88:	42c80000 	.word	0x42c80000
 8000c8c:	51eb851f 	.word	0x51eb851f
 8000c90:	08005c64 	.word	0x08005c64
 8000c94:	20000134 	.word	0x20000134
 8000c98:	200000e4 	.word	0x200000e4
 8000c9c:	08005c70 	.word	0x08005c70

08000ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b0a6      	sub	sp, #152	; 0x98
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000caa:	2228      	movs	r2, #40	; 0x28
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f004 fbb2 	bl	8005418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2258      	movs	r2, #88	; 0x58
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f004 fba4 	bl	8005418 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 fb99 	bl	8003434 <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000d08:	f000 f94c 	bl	8000fa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d10:	2300      	movs	r3, #0
 8000d12:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d20:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f003 fa9a 	bl	8004260 <HAL_RCC_ClockConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d32:	f000 f937 	bl	8000fa4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000d36:	23a2      	movs	r3, #162	; 0xa2
 8000d38:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 fcbe 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000d56:	f000 f925 	bl	8000fa4 <Error_Handler>
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3798      	adds	r7, #152	; 0x98
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000d88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d8e:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d94:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d9a:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da0:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dae:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de0:	4817      	ldr	r0, [pc, #92]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000de2:	f000 faf9 	bl	80013d8 <HAL_ADC_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000dec:	f000 f8da 	bl	8000fa4 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4811      	ldr	r0, [pc, #68]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000dfc:	f001 f9f0 	bl	80021e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000e06:	f000 f8cd 	bl	8000fa4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_ADC1_Init+0xdc>)
 8000e28:	f000 feee 	bl	8001c08 <HAL_ADC_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000e32:	f000 f8b7 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3728      	adds	r7, #40	; 0x28
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200000e4 	.word	0x200000e4

08000e44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <MX_I2C1_Init+0x78>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e50:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <MX_I2C1_Init+0x7c>)
 8000e52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e80:	f001 fde6 	bl	8002a50 <HAL_I2C_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e8a:	f000 f88b 	bl	8000fa4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4809      	ldr	r0, [pc, #36]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000e92:	f002 fa37 	bl	8003304 <HAL_I2CEx_ConfigAnalogFilter>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e9c:	f000 f882 	bl	8000fa4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_I2C1_Init+0x74>)
 8000ea4:	f002 fa79 	bl	800339a <HAL_I2CEx_ConfigDigitalFilter>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000eae:	f000 f879 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000098 	.word	0x20000098
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	2000090e 	.word	0x2000090e

08000ec4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000eca:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <MX_USART2_UART_Init+0x5c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ed0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000f08:	f003 fdfe 	bl	8004b08 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f12:	f000 f847 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000134 	.word	0x20000134
 8000f20:	40004400 	.word	0x40004400

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_GPIO_Init+0x7c>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <MX_GPIO_Init+0x7c>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	6153      	str	r3, [r2, #20]
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_GPIO_Init+0x7c>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_GPIO_Init+0x7c>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <MX_GPIO_Init+0x7c>)
 8000f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <MX_GPIO_Init+0x7c>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f001 fd54 	bl	8002a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f001 fbba 	bl	800270c <HAL_GPIO_Init>

}
 8000f98:	bf00      	nop
 8000f9a:	3720      	adds	r7, #32
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6193      	str	r3, [r2, #24]
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	61d3      	str	r3, [r2, #28]
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_MspInit+0x44>)
 8000fe0:	69db      	ldr	r3, [r3, #28]
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800101c:	d124      	bne.n	8001068 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_ADC_MspInit+0x74>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <HAL_ADC_MspInit+0x74>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	6153      	str	r3, [r2, #20]
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_ADC_MspInit+0x74>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_ADC_MspInit+0x74>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <HAL_ADC_MspInit+0x74>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	6153      	str	r3, [r2, #20]
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_ADC_MspInit+0x74>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800104e:	2301      	movs	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f001 fb52 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <HAL_I2C_MspInit+0x7c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d128      	bne.n	80010e8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_I2C_MspInit+0x80>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <HAL_I2C_MspInit+0x80>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6153      	str	r3, [r2, #20]
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_I2C_MspInit+0x80>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b4:	2312      	movs	r3, #18
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c0:	2304      	movs	r3, #4
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	480b      	ldr	r0, [pc, #44]	; (80010f8 <HAL_I2C_MspInit+0x84>)
 80010cc:	f001 fb1e 	bl	800270c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_I2C_MspInit+0x80>)
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_I2C_MspInit+0x80>)
 80010d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010da:	61d3      	str	r3, [r2, #28]
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_I2C_MspInit+0x80>)
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40005400 	.word	0x40005400
 80010f4:	40021000 	.word	0x40021000
 80010f8:	48000400 	.word	0x48000400

080010fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a17      	ldr	r2, [pc, #92]	; (8001178 <HAL_UART_MspInit+0x7c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d128      	bne.n	8001170 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_UART_MspInit+0x80>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a16      	ldr	r2, [pc, #88]	; (800117c <HAL_UART_MspInit+0x80>)
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_UART_MspInit+0x80>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_UART_MspInit+0x80>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_UART_MspInit+0x80>)
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	6153      	str	r3, [r2, #20]
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_UART_MspInit+0x80>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800114e:	230c      	movs	r3, #12
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115e:	2307      	movs	r3, #7
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f001 face 	bl	800270c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40004400 	.word	0x40004400
 800117c:	40021000 	.word	0x40021000

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <MemManage_Handler+0x4>

0800119a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d4:	f000 f8be 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f004 f8da 	bl	80053c4 <__errno>
 8001210:	4602      	mov	r2, r0
 8001212:	230c      	movs	r3, #12
 8001214:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	; (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20010000 	.word	0x20010000
 800123c:	00000400 	.word	0x00000400
 8001240:	2000008c 	.word	0x2000008c
 8001244:	200001c0 	.word	0x200001c0

08001248 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <SystemInit+0x28>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <SystemInit+0x28>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SystemInit+0x28>)
 800125e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001262:	609a      	str	r2, [r3, #8]
#endif
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001278:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800127a:	e003      	b.n	8001284 <LoopCopyDataInit>

0800127c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800127e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001280:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001282:	3104      	adds	r1, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001288:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800128a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800128c:	d3f6      	bcc.n	800127c <CopyDataInit>
	ldr	r2, =_sbss
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001290:	e002      	b.n	8001298 <LoopFillZerobss>

08001292 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001292:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001294:	f842 3b04 	str.w	r3, [r2], #4

08001298 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <LoopForever+0x16>)
	cmp	r2, r3
 800129a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800129c:	d3f9      	bcc.n	8001292 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800129e:	f7ff ffd3 	bl	8001248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f004 f895 	bl	80053d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012a6:	f7ff fc11 	bl	8000acc <main>

080012aa <LoopForever>:

LoopForever:
    b LoopForever
 80012aa:	e7fe      	b.n	80012aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012ac:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80012b0:	08005cec 	.word	0x08005cec
	ldr	r0, =_sdata
 80012b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012b8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80012bc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80012c0:	200001bc 	.word	0x200001bc

080012c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_2_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_Init+0x28>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_Init+0x28>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f001 f9e3 	bl	80026a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fe66 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f001 f9ed 	bl	80026f2 <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f001 f9c3 	bl	80026ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000000 	.word	0x20000000
 800134c:	20000008 	.word	0x20000008
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008
 8001378:	200001b4 	.word	0x200001b4

0800137c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200001b4 	.word	0x200001b4

08001394 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ffee 	bl	800137c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_Delay+0x40>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffde 	bl	800137c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000008 	.word	0x20000008

080013d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b09a      	sub	sp, #104	; 0x68
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e1e3      	b.n	80017c0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	2b00      	cmp	r3, #0
 8001408:	d176      	bne.n	80014f8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	2b00      	cmp	r3, #0
 8001410:	d152      	bne.n	80014b8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fde5 	bl	8000ffc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d13b      	bne.n	80014b8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f001 f81d 	bl	8002480 <ADC_Disable>
 8001446:	4603      	mov	r3, r0
 8001448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	2b00      	cmp	r3, #0
 8001456:	d12f      	bne.n	80014b8 <HAL_ADC_Init+0xe0>
 8001458:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800145c:	2b00      	cmp	r3, #0
 800145e:	d12b      	bne.n	80014b8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001468:	f023 0302 	bic.w	r3, r3, #2
 800146c:	f043 0202 	orr.w	r2, r3, #2
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001482:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001492:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001494:	4b92      	ldr	r3, [pc, #584]	; (80016e0 <HAL_ADC_Init+0x308>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a92      	ldr	r2, [pc, #584]	; (80016e4 <HAL_ADC_Init+0x30c>)
 800149a:	fba2 2303 	umull	r2, r3, r2, r3
 800149e:	0c9a      	lsrs	r2, r3, #18
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014aa:	e002      	b.n	80014b2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f9      	bne.n	80014ac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014d4:	d110      	bne.n	80014f8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f023 0312 	bic.w	r3, r3, #18
 80014de:	f043 0210 	orr.w	r2, r3, #16
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f043 0201 	orr.w	r2, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	2b00      	cmp	r3, #0
 8001502:	f040 8150 	bne.w	80017a6 <HAL_ADC_Init+0x3ce>
 8001506:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800150a:	2b00      	cmp	r3, #0
 800150c:	f040 814b 	bne.w	80017a6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 8143 	bne.w	80017a6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001528:	f043 0202 	orr.w	r2, r3, #2
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001538:	d004      	beq.n	8001544 <HAL_ADC_Init+0x16c>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a6a      	ldr	r2, [pc, #424]	; (80016e8 <HAL_ADC_Init+0x310>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d101      	bne.n	8001548 <HAL_ADC_Init+0x170>
 8001544:	4b69      	ldr	r3, [pc, #420]	; (80016ec <HAL_ADC_Init+0x314>)
 8001546:	e000      	b.n	800154a <HAL_ADC_Init+0x172>
 8001548:	4b69      	ldr	r3, [pc, #420]	; (80016f0 <HAL_ADC_Init+0x318>)
 800154a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001554:	d102      	bne.n	800155c <HAL_ADC_Init+0x184>
 8001556:	4b64      	ldr	r3, [pc, #400]	; (80016e8 <HAL_ADC_Init+0x310>)
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e01a      	b.n	8001592 <HAL_ADC_Init+0x1ba>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a61      	ldr	r2, [pc, #388]	; (80016e8 <HAL_ADC_Init+0x310>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d103      	bne.n	800156e <HAL_ADC_Init+0x196>
 8001566:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	e011      	b.n	8001592 <HAL_ADC_Init+0x1ba>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a60      	ldr	r2, [pc, #384]	; (80016f4 <HAL_ADC_Init+0x31c>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d102      	bne.n	800157e <HAL_ADC_Init+0x1a6>
 8001578:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <HAL_ADC_Init+0x320>)
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	e009      	b.n	8001592 <HAL_ADC_Init+0x1ba>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a5d      	ldr	r2, [pc, #372]	; (80016f8 <HAL_ADC_Init+0x320>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d102      	bne.n	800158e <HAL_ADC_Init+0x1b6>
 8001588:	4b5a      	ldr	r3, [pc, #360]	; (80016f4 <HAL_ADC_Init+0x31c>)
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	e001      	b.n	8001592 <HAL_ADC_Init+0x1ba>
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d108      	bne.n	80015b2 <HAL_ADC_Init+0x1da>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_Init+0x1da>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_ADC_Init+0x1dc>
 80015b2:	2300      	movs	r3, #0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d11c      	bne.n	80015f2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015b8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d010      	beq.n	80015e0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d107      	bne.n	80015da <HAL_ADC_Init+0x202>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <HAL_ADC_Init+0x202>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_ADC_Init+0x204>
 80015da:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d108      	bne.n	80015f2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80015e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7e5b      	ldrb	r3, [r3, #25]
 80015f6:	035b      	lsls	r3, r3, #13
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015fc:	2a01      	cmp	r2, #1
 80015fe:	d002      	beq.n	8001606 <HAL_ADC_Init+0x22e>
 8001600:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001604:	e000      	b.n	8001608 <HAL_ADC_Init+0x230>
 8001606:	2200      	movs	r2, #0
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4313      	orrs	r3, r2
 8001616:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001618:	4313      	orrs	r3, r2
 800161a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d11b      	bne.n	800165e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7e5b      	ldrb	r3, [r3, #25]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d109      	bne.n	8001642 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	3b01      	subs	r3, #1
 8001634:	045a      	lsls	r2, r3, #17
 8001636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001638:	4313      	orrs	r3, r2
 800163a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163e:	663b      	str	r3, [r7, #96]	; 0x60
 8001640:	e00d      	b.n	800165e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800164a:	f043 0220 	orr.w	r2, r3, #32
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f043 0201 	orr.w	r2, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	2b01      	cmp	r3, #1
 8001664:	d054      	beq.n	8001710 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <HAL_ADC_Init+0x31c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d004      	beq.n	800167a <HAL_ADC_Init+0x2a2>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a20      	ldr	r2, [pc, #128]	; (80016f8 <HAL_ADC_Init+0x320>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d140      	bne.n	80016fc <HAL_ADC_Init+0x324>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001682:	d02a      	beq.n	80016da <HAL_ADC_Init+0x302>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800168c:	d022      	beq.n	80016d4 <HAL_ADC_Init+0x2fc>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001696:	d01a      	beq.n	80016ce <HAL_ADC_Init+0x2f6>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80016a0:	d012      	beq.n	80016c8 <HAL_ADC_Init+0x2f0>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80016aa:	d00a      	beq.n	80016c2 <HAL_ADC_Init+0x2ea>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80016b4:	d002      	beq.n	80016bc <HAL_ADC_Init+0x2e4>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	e023      	b.n	8001704 <HAL_ADC_Init+0x32c>
 80016bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016c0:	e020      	b.n	8001704 <HAL_ADC_Init+0x32c>
 80016c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016c6:	e01d      	b.n	8001704 <HAL_ADC_Init+0x32c>
 80016c8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016cc:	e01a      	b.n	8001704 <HAL_ADC_Init+0x32c>
 80016ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d2:	e017      	b.n	8001704 <HAL_ADC_Init+0x32c>
 80016d4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80016d8:	e014      	b.n	8001704 <HAL_ADC_Init+0x32c>
 80016da:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016de:	e011      	b.n	8001704 <HAL_ADC_Init+0x32c>
 80016e0:	20000000 	.word	0x20000000
 80016e4:	431bde83 	.word	0x431bde83
 80016e8:	50000100 	.word	0x50000100
 80016ec:	50000300 	.word	0x50000300
 80016f0:	50000700 	.word	0x50000700
 80016f4:	50000400 	.word	0x50000400
 80016f8:	50000500 	.word	0x50000500
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001708:	4313      	orrs	r3, r2
 800170a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800170c:	4313      	orrs	r3, r2
 800170e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b00      	cmp	r3, #0
 800171c:	d114      	bne.n	8001748 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800172c:	f023 0302 	bic.w	r3, r3, #2
 8001730:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7e1b      	ldrb	r3, [r3, #24]
 8001736:	039a      	lsls	r2, r3, #14
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4313      	orrs	r3, r2
 8001742:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001744:	4313      	orrs	r3, r2
 8001746:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <HAL_ADC_Init+0x3f0>)
 8001750:	4013      	ands	r3, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001758:	430b      	orrs	r3, r1
 800175a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d10c      	bne.n	800177e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f023 010f 	bic.w	r1, r3, #15
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	631a      	str	r2, [r3, #48]	; 0x30
 800177c:	e007      	b.n	800178e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 020f 	bic.w	r2, r2, #15
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f023 0303 	bic.w	r3, r3, #3
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
 80017a4:	e00a      	b.n	80017bc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f023 0312 	bic.w	r3, r3, #18
 80017ae:	f043 0210 	orr.w	r2, r3, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80017b6:	2301      	movs	r3, #1
 80017b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80017bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3768      	adds	r7, #104	; 0x68
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	fff0c007 	.word	0xfff0c007

080017cc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f040 80f9 	bne.w	80019da <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_Start+0x2a>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e0f4      	b.n	80019e0 <HAL_ADC_Start+0x214>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 fde0 	bl	80023c4 <ADC_Enable>
 8001804:	4603      	mov	r3, r0
 8001806:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f040 80e0 	bne.w	80019d0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800182c:	d004      	beq.n	8001838 <HAL_ADC_Start+0x6c>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a6d      	ldr	r2, [pc, #436]	; (80019e8 <HAL_ADC_Start+0x21c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d106      	bne.n	8001846 <HAL_ADC_Start+0x7a>
 8001838:	4b6c      	ldr	r3, [pc, #432]	; (80019ec <HAL_ADC_Start+0x220>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	2b00      	cmp	r3, #0
 8001842:	d010      	beq.n	8001866 <HAL_ADC_Start+0x9a>
 8001844:	e005      	b.n	8001852 <HAL_ADC_Start+0x86>
 8001846:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_ADC_Start+0x224>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_ADC_Start+0x9a>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800185a:	d004      	beq.n	8001866 <HAL_ADC_Start+0x9a>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a64      	ldr	r2, [pc, #400]	; (80019f4 <HAL_ADC_Start+0x228>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d115      	bne.n	8001892 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d036      	beq.n	80018ee <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001888:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001890:	e02d      	b.n	80018ee <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a6:	d004      	beq.n	80018b2 <HAL_ADC_Start+0xe6>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a4e      	ldr	r2, [pc, #312]	; (80019e8 <HAL_ADC_Start+0x21c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d10a      	bne.n	80018c8 <HAL_ADC_Start+0xfc>
 80018b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf14      	ite	ne
 80018c0:	2301      	movne	r3, #1
 80018c2:	2300      	moveq	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	e008      	b.n	80018da <HAL_ADC_Start+0x10e>
 80018c8:	4b4a      	ldr	r3, [pc, #296]	; (80019f4 <HAL_ADC_Start+0x228>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018fa:	d106      	bne.n	800190a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	f023 0206 	bic.w	r2, r3, #6
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	645a      	str	r2, [r3, #68]	; 0x44
 8001908:	e002      	b.n	8001910 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	221c      	movs	r2, #28
 800191e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001928:	d004      	beq.n	8001934 <HAL_ADC_Start+0x168>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2e      	ldr	r2, [pc, #184]	; (80019e8 <HAL_ADC_Start+0x21c>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d106      	bne.n	8001942 <HAL_ADC_Start+0x176>
 8001934:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_ADC_Start+0x220>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	2b00      	cmp	r3, #0
 800193e:	d03e      	beq.n	80019be <HAL_ADC_Start+0x1f2>
 8001940:	e005      	b.n	800194e <HAL_ADC_Start+0x182>
 8001942:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_ADC_Start+0x224>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	2b00      	cmp	r3, #0
 800194c:	d037      	beq.n	80019be <HAL_ADC_Start+0x1f2>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001956:	d004      	beq.n	8001962 <HAL_ADC_Start+0x196>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a22      	ldr	r2, [pc, #136]	; (80019e8 <HAL_ADC_Start+0x21c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d106      	bne.n	8001970 <HAL_ADC_Start+0x1a4>
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <HAL_ADC_Start+0x220>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	2b05      	cmp	r3, #5
 800196c:	d027      	beq.n	80019be <HAL_ADC_Start+0x1f2>
 800196e:	e005      	b.n	800197c <HAL_ADC_Start+0x1b0>
 8001970:	4b1f      	ldr	r3, [pc, #124]	; (80019f0 <HAL_ADC_Start+0x224>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 031f 	and.w	r3, r3, #31
 8001978:	2b05      	cmp	r3, #5
 800197a:	d020      	beq.n	80019be <HAL_ADC_Start+0x1f2>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001984:	d004      	beq.n	8001990 <HAL_ADC_Start+0x1c4>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_ADC_Start+0x21c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d106      	bne.n	800199e <HAL_ADC_Start+0x1d2>
 8001990:	4b16      	ldr	r3, [pc, #88]	; (80019ec <HAL_ADC_Start+0x220>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	2b09      	cmp	r3, #9
 800199a:	d010      	beq.n	80019be <HAL_ADC_Start+0x1f2>
 800199c:	e005      	b.n	80019aa <HAL_ADC_Start+0x1de>
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_ADC_Start+0x224>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 031f 	and.w	r3, r3, #31
 80019a6:	2b09      	cmp	r3, #9
 80019a8:	d009      	beq.n	80019be <HAL_ADC_Start+0x1f2>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019b2:	d004      	beq.n	80019be <HAL_ADC_Start+0x1f2>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <HAL_ADC_Start+0x228>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10f      	bne.n	80019de <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0204 	orr.w	r2, r2, #4
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	e006      	b.n	80019de <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80019d8:	e001      	b.n	80019de <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019da:	2302      	movs	r3, #2
 80019dc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	50000100 	.word	0x50000100
 80019ec:	50000300 	.word	0x50000300
 80019f0:	50000700 	.word	0x50000700
 80019f4:	50000400 	.word	0x50000400

080019f8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	2b08      	cmp	r3, #8
 8001a0c:	d102      	bne.n	8001a14 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e03a      	b.n	8001a8a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a1c:	d004      	beq.n	8001a28 <HAL_ADC_PollForConversion+0x30>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a6e      	ldr	r2, [pc, #440]	; (8001bdc <HAL_ADC_PollForConversion+0x1e4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_ADC_PollForConversion+0x34>
 8001a28:	4b6d      	ldr	r3, [pc, #436]	; (8001be0 <HAL_ADC_PollForConversion+0x1e8>)
 8001a2a:	e000      	b.n	8001a2e <HAL_ADC_PollForConversion+0x36>
 8001a2c:	4b6d      	ldr	r3, [pc, #436]	; (8001be4 <HAL_ADC_PollForConversion+0x1ec>)
 8001a2e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d112      	bne.n	8001a62 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d11d      	bne.n	8001a86 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f043 0220 	orr.w	r2, r3, #32
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0b8      	b.n	8001bd4 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f043 0220 	orr.w	r2, r3, #32
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0a6      	b.n	8001bd4 <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001a86:	230c      	movs	r3, #12
 8001a88:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a92:	d004      	beq.n	8001a9e <HAL_ADC_PollForConversion+0xa6>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a50      	ldr	r2, [pc, #320]	; (8001bdc <HAL_ADC_PollForConversion+0x1e4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d106      	bne.n	8001aac <HAL_ADC_PollForConversion+0xb4>
 8001a9e:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <HAL_ADC_PollForConversion+0x1e8>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 031f 	and.w	r3, r3, #31
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d010      	beq.n	8001acc <HAL_ADC_PollForConversion+0xd4>
 8001aaa:	e005      	b.n	8001ab8 <HAL_ADC_PollForConversion+0xc0>
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <HAL_ADC_PollForConversion+0x1ec>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 031f 	and.w	r3, r3, #31
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d009      	beq.n	8001acc <HAL_ADC_PollForConversion+0xd4>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ac0:	d004      	beq.n	8001acc <HAL_ADC_PollForConversion+0xd4>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a48      	ldr	r2, [pc, #288]	; (8001be8 <HAL_ADC_PollForConversion+0x1f0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d104      	bne.n	8001ad6 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	e00f      	b.n	8001af6 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ade:	d004      	beq.n	8001aea <HAL_ADC_PollForConversion+0xf2>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a3d      	ldr	r2, [pc, #244]	; (8001bdc <HAL_ADC_PollForConversion+0x1e4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d102      	bne.n	8001af0 <HAL_ADC_PollForConversion+0xf8>
 8001aea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001aee:	e000      	b.n	8001af2 <HAL_ADC_PollForConversion+0xfa>
 8001af0:	4b3d      	ldr	r3, [pc, #244]	; (8001be8 <HAL_ADC_PollForConversion+0x1f0>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001af6:	f7ff fc41 	bl	800137c <HAL_GetTick>
 8001afa:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001afc:	e01a      	b.n	8001b34 <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d016      	beq.n	8001b34 <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d007      	beq.n	8001b1c <HAL_ADC_PollForConversion+0x124>
 8001b0c:	f7ff fc36 	bl	800137c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d20b      	bcs.n	8001b34 <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f043 0204 	orr.w	r2, r3, #4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e04f      	b.n	8001bd4 <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d0dd      	beq.n	8001afe <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d131      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d12c      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d125      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d112      	bne.n	8001ba8 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d112      	bne.n	8001bc0 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba6:	e00b      	b.n	8001bc0 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	f043 0220 	orr.w	r2, r3, #32
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb8:	f043 0201 	orr.w	r2, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d103      	bne.n	8001bd2 <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	50000100 	.word	0x50000100
 8001be0:	50000300 	.word	0x50000300
 8001be4:	50000700 	.word	0x50000700
 8001be8:	50000400 	.word	0x50000400

08001bec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b09b      	sub	sp, #108	; 0x6c
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x22>
 8001c26:	2302      	movs	r3, #2
 8001c28:	e2cb      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x5ba>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f040 82af 	bne.w	80021a0 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d81c      	bhi.n	8001c84 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	231f      	movs	r3, #31
 8001c60:	4093      	lsls	r3, r2
 8001c62:	43db      	mvns	r3, r3
 8001c64:	4019      	ands	r1, r3
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
 8001c82:	e063      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	d81e      	bhi.n	8001cca <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	3b1e      	subs	r3, #30
 8001ca0:	221f      	movs	r2, #31
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4019      	ands	r1, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	3b1e      	subs	r3, #30
 8001cbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34
 8001cc8:	e040      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b0e      	cmp	r3, #14
 8001cd0:	d81e      	bhi.n	8001d10 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	3b3c      	subs	r3, #60	; 0x3c
 8001ce6:	221f      	movs	r2, #31
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	4019      	ands	r1, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	3b3c      	subs	r3, #60	; 0x3c
 8001d02:	fa00 f203 	lsl.w	r2, r0, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d0e:	e01d      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	3b5a      	subs	r3, #90	; 0x5a
 8001d24:	221f      	movs	r2, #31
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	4019      	ands	r1, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	3b5a      	subs	r3, #90	; 0x5a
 8001d40:	fa00 f203 	lsl.w	r2, r0, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 80e5 	bne.w	8001f26 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b09      	cmp	r3, #9
 8001d62:	d91c      	bls.n	8001d9e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6999      	ldr	r1, [r3, #24]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	3b1e      	subs	r3, #30
 8001d76:	2207      	movs	r2, #7
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4019      	ands	r1, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6898      	ldr	r0, [r3, #8]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3b1e      	subs	r3, #30
 8001d90:	fa00 f203 	lsl.w	r2, r0, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	619a      	str	r2, [r3, #24]
 8001d9c:	e019      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6959      	ldr	r1, [r3, #20]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	2207      	movs	r2, #7
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4019      	ands	r1, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6898      	ldr	r0, [r3, #8]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	08db      	lsrs	r3, r3, #3
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d84f      	bhi.n	8001e94 <HAL_ADC_ConfigChannel+0x28c>
 8001df4:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <HAL_ADC_ConfigChannel+0x1f4>)
 8001df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfa:	bf00      	nop
 8001dfc:	08001e0d 	.word	0x08001e0d
 8001e00:	08001e2f 	.word	0x08001e2f
 8001e04:	08001e51 	.word	0x08001e51
 8001e08:	08001e73 	.word	0x08001e73
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e12:	4b9f      	ldr	r3, [pc, #636]	; (8002090 <HAL_ADC_ConfigChannel+0x488>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	0691      	lsls	r1, r2, #26
 8001e1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e2a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e2c:	e07e      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e34:	4b96      	ldr	r3, [pc, #600]	; (8002090 <HAL_ADC_ConfigChannel+0x488>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	0691      	lsls	r1, r2, #26
 8001e3e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e40:	430a      	orrs	r2, r1
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e4c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e4e:	e06d      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001e56:	4b8e      	ldr	r3, [pc, #568]	; (8002090 <HAL_ADC_ConfigChannel+0x488>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	0691      	lsls	r1, r2, #26
 8001e60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e62:	430a      	orrs	r2, r1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e6e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e70:	e05c      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e78:	4b85      	ldr	r3, [pc, #532]	; (8002090 <HAL_ADC_ConfigChannel+0x488>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	0691      	lsls	r1, r2, #26
 8001e82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e84:	430a      	orrs	r2, r1
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e90:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e92:	e04b      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	069b      	lsls	r3, r3, #26
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d107      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eb6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ebe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	069b      	lsls	r3, r3, #26
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d107      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001eda:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	069b      	lsls	r3, r3, #26
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d107      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001efe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	069b      	lsls	r3, r3, #26
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d10a      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f22:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f24:	e001      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001f26:	bf00      	nop
 8001f28:	e000      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x324>
      break;
 8001f2a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d108      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x344>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d101      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x344>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x346>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 8131 	bne.w	80021b6 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d00f      	beq.n	8001f7c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	400a      	ands	r2, r1
 8001f76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001f7a:	e049      	b.n	8002010 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b09      	cmp	r3, #9
 8001f9c:	d91c      	bls.n	8001fd8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6999      	ldr	r1, [r3, #24]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	3b1b      	subs	r3, #27
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	4019      	ands	r1, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6898      	ldr	r0, [r3, #8]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b1b      	subs	r3, #27
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	619a      	str	r2, [r3, #24]
 8001fd6:	e01b      	b.n	8002010 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6959      	ldr	r1, [r3, #20]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	2207      	movs	r2, #7
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	4019      	ands	r1, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6898      	ldr	r0, [r3, #8]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	fa00 f203 	lsl.w	r2, r0, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002018:	d004      	beq.n	8002024 <HAL_ADC_ConfigChannel+0x41c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1d      	ldr	r2, [pc, #116]	; (8002094 <HAL_ADC_ConfigChannel+0x48c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d101      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x420>
 8002024:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <HAL_ADC_ConfigChannel+0x490>)
 8002026:	e000      	b.n	800202a <HAL_ADC_ConfigChannel+0x422>
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <HAL_ADC_ConfigChannel+0x494>)
 800202a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b10      	cmp	r3, #16
 8002032:	d105      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800203c:	2b00      	cmp	r3, #0
 800203e:	d015      	beq.n	800206c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002044:	2b11      	cmp	r3, #17
 8002046:	d105      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00b      	beq.n	800206c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002058:	2b12      	cmp	r3, #18
 800205a:	f040 80ac 	bne.w	80021b6 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800205e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002066:	2b00      	cmp	r3, #0
 8002068:	f040 80a5 	bne.w	80021b6 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002074:	d102      	bne.n	800207c <HAL_ADC_ConfigChannel+0x474>
 8002076:	4b07      	ldr	r3, [pc, #28]	; (8002094 <HAL_ADC_ConfigChannel+0x48c>)
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	e023      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x4bc>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <HAL_ADC_ConfigChannel+0x48c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d10c      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x498>
 8002086:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e01a      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x4bc>
 800208e:	bf00      	nop
 8002090:	83fff000 	.word	0x83fff000
 8002094:	50000100 	.word	0x50000100
 8002098:	50000300 	.word	0x50000300
 800209c:	50000700 	.word	0x50000700
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a4a      	ldr	r2, [pc, #296]	; (80021d0 <HAL_ADC_ConfigChannel+0x5c8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d102      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x4a8>
 80020aa:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_ADC_ConfigChannel+0x5cc>)
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e009      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x4bc>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a47      	ldr	r2, [pc, #284]	; (80021d4 <HAL_ADC_ConfigChannel+0x5cc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d102      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x4b8>
 80020ba:	4b45      	ldr	r3, [pc, #276]	; (80021d0 <HAL_ADC_ConfigChannel+0x5c8>)
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e001      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x4bc>
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d108      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x4dc>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x4dc>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x4de>
 80020e4:	2300      	movs	r3, #0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d150      	bne.n	800218c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <HAL_ADC_ConfigChannel+0x504>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x504>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <HAL_ADC_ConfigChannel+0x506>
 800210c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800210e:	2b00      	cmp	r3, #0
 8002110:	d13c      	bne.n	800218c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b10      	cmp	r3, #16
 8002118:	d11d      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x54e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002122:	d118      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800212c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800212e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a29      	ldr	r2, [pc, #164]	; (80021dc <HAL_ADC_ConfigChannel+0x5d4>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0c9a      	lsrs	r2, r3, #18
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002146:	e002      	b.n	800214e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	3b01      	subs	r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f9      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002154:	e02e      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b11      	cmp	r3, #17
 800215c:	d10b      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x56e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002166:	d106      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002172:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002174:	e01e      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b12      	cmp	r3, #18
 800217c:	d11a      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800217e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002188:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800218a:	e013      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f043 0220 	orr.w	r2, r3, #32
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800219e:	e00a      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0220 	orr.w	r2, r3, #32
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021b2:	e000      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021b4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	376c      	adds	r7, #108	; 0x6c
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	50000400 	.word	0x50000400
 80021d4:	50000500 	.word	0x50000500
 80021d8:	20000000 	.word	0x20000000
 80021dc:	431bde83 	.word	0x431bde83

080021e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b099      	sub	sp, #100	; 0x64
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f8:	d102      	bne.n	8002200 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80021fa:	4b6d      	ldr	r3, [pc, #436]	; (80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	e01a      	b.n	8002236 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a6a      	ldr	r2, [pc, #424]	; (80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d103      	bne.n	8002212 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800220a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	e011      	b.n	8002236 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a67      	ldr	r2, [pc, #412]	; (80023b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d102      	bne.n	8002222 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800221c:	4b66      	ldr	r3, [pc, #408]	; (80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	e009      	b.n	8002236 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a64      	ldr	r2, [pc, #400]	; (80023b8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d102      	bne.n	8002232 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800222c:	4b61      	ldr	r3, [pc, #388]	; (80023b4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	e001      	b.n	8002236 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0b0      	b.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800224a:	2302      	movs	r3, #2
 800224c:	e0a9      	b.n	80023a2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f040 808d 	bne.w	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 8086 	bne.w	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800227c:	d004      	beq.n	8002288 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a4b      	ldr	r2, [pc, #300]	; (80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002288:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800228a:	e000      	b.n	800228e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800228c:	4b4c      	ldr	r3, [pc, #304]	; (80023c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800228e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d040      	beq.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022aa:	035b      	lsls	r3, r3, #13
 80022ac:	430b      	orrs	r3, r1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022b2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d108      	bne.n	80022d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80022d4:	2300      	movs	r3, #0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d15c      	bne.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80022f6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d14b      	bne.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80022fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002304:	f023 030f 	bic.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	6811      	ldr	r1, [r2, #0]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	6892      	ldr	r2, [r2, #8]
 8002310:	430a      	orrs	r2, r1
 8002312:	431a      	orrs	r2, r3
 8002314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002316:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002318:	e03c      	b.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800231a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002324:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d108      	bne.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002346:	2300      	movs	r3, #0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d123      	bne.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b01      	cmp	r3, #1
 8002356:	d107      	bne.n	8002368 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002368:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d112      	bne.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800236e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002376:	f023 030f 	bic.w	r3, r3, #15
 800237a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800237c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800237e:	e009      	b.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f043 0220 	orr.w	r2, r3, #32
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002392:	e000      	b.n	8002396 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002394:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800239e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80023a2:	4618      	mov	r0, r3
 80023a4:	3764      	adds	r7, #100	; 0x64
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	50000100 	.word	0x50000100
 80023b4:	50000400 	.word	0x50000400
 80023b8:	50000500 	.word	0x50000500
 80023bc:	50000300 	.word	0x50000300
 80023c0:	50000700 	.word	0x50000700

080023c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d108      	bne.n	80023f0 <ADC_Enable+0x2c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <ADC_Enable+0x2c>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <ADC_Enable+0x2e>
 80023f0:	2300      	movs	r3, #0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d13c      	bne.n	8002470 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	4b1f      	ldr	r3, [pc, #124]	; (800247c <ADC_Enable+0xb8>)
 80023fe:	4013      	ands	r3, r2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00d      	beq.n	8002420 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f043 0210 	orr.w	r2, r3, #16
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	f043 0201 	orr.w	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e028      	b.n	8002472 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002430:	f7fe ffa4 	bl	800137c <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002436:	e014      	b.n	8002462 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002438:	f7fe ffa0 	bl	800137c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d90d      	bls.n	8002462 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f043 0210 	orr.w	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e007      	b.n	8002472 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b01      	cmp	r3, #1
 800246e:	d1e3      	bne.n	8002438 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	8000003f 	.word	0x8000003f

08002480 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <ADC_Disable+0x2c>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <ADC_Disable+0x2c>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <ADC_Disable+0x2e>
 80024ac:	2300      	movs	r3, #0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d040      	beq.n	8002534 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 030d 	and.w	r3, r3, #13
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d10f      	bne.n	80024e0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0202 	orr.w	r2, r2, #2
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2203      	movs	r2, #3
 80024d6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80024d8:	f7fe ff50 	bl	800137c <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024de:	e022      	b.n	8002526 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	f043 0210 	orr.w	r2, r3, #16
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	f043 0201 	orr.w	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e01c      	b.n	8002536 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024fc:	f7fe ff3e 	bl	800137c <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d90d      	bls.n	8002526 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	f043 0210 	orr.w	r2, r3, #16
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	f043 0201 	orr.w	r2, r3, #1
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e007      	b.n	8002536 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b01      	cmp	r3, #1
 8002532:	d0e3      	beq.n	80024fc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
	...

08002540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002550:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800256c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002572:	4a04      	ldr	r2, [pc, #16]	; (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <__NVIC_GetPriorityGrouping+0x18>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0307 	and.w	r3, r3, #7
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	6039      	str	r1, [r7, #0]
 80025ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	db0a      	blt.n	80025ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	490c      	ldr	r1, [pc, #48]	; (80025f0 <__NVIC_SetPriority+0x4c>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	0112      	lsls	r2, r2, #4
 80025c4:	b2d2      	uxtb	r2, r2
 80025c6:	440b      	add	r3, r1
 80025c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025cc:	e00a      	b.n	80025e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4908      	ldr	r1, [pc, #32]	; (80025f4 <__NVIC_SetPriority+0x50>)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3b04      	subs	r3, #4
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	440b      	add	r3, r1
 80025e2:	761a      	strb	r2, [r3, #24]
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b089      	sub	sp, #36	; 0x24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f1c3 0307 	rsb	r3, r3, #7
 8002612:	2b04      	cmp	r3, #4
 8002614:	bf28      	it	cs
 8002616:	2304      	movcs	r3, #4
 8002618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3304      	adds	r3, #4
 800261e:	2b06      	cmp	r3, #6
 8002620:	d902      	bls.n	8002628 <NVIC_EncodePriority+0x30>
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	3b03      	subs	r3, #3
 8002626:	e000      	b.n	800262a <NVIC_EncodePriority+0x32>
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	f04f 32ff 	mov.w	r2, #4294967295
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	401a      	ands	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43d9      	mvns	r1, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	4313      	orrs	r3, r2
         );
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	; 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002670:	d301      	bcc.n	8002676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002672:	2301      	movs	r3, #1
 8002674:	e00f      	b.n	8002696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <SysTick_Config+0x40>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267e:	210f      	movs	r1, #15
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f7ff ff8e 	bl	80025a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <SysTick_Config+0x40>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <SysTick_Config+0x40>)
 8002690:	2207      	movs	r2, #7
 8002692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	e000e010 	.word	0xe000e010

080026a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff47 	bl	8002540 <__NVIC_SetPriorityGrouping>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026cc:	f7ff ff5c 	bl	8002588 <__NVIC_GetPriorityGrouping>
 80026d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff ff8e 	bl	80025f8 <NVIC_EncodePriority>
 80026dc:	4602      	mov	r2, r0
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5d 	bl	80025a4 <__NVIC_SetPriority>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7ff ffb0 	bl	8002660 <SysTick_Config>
 8002700:	4603      	mov	r3, r0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271a:	e160      	b.n	80029de <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8152 	beq.w	80029d8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d00b      	beq.n	8002754 <HAL_GPIO_Init+0x48>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d007      	beq.n	8002754 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002748:	2b11      	cmp	r3, #17
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b12      	cmp	r3, #18
 8002752:	d130      	bne.n	80027b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	4013      	ands	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800278a:	2201      	movs	r2, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4013      	ands	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	f003 0201 	and.w	r2, r3, #1
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	2203      	movs	r2, #3
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0xea>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b12      	cmp	r3, #18
 80027f4:	d123      	bne.n	800283e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	08da      	lsrs	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3208      	adds	r2, #8
 80027fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002802:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	08da      	lsrs	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3208      	adds	r2, #8
 8002838:	6939      	ldr	r1, [r7, #16]
 800283a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f003 0203 	and.w	r2, r3, #3
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 80ac 	beq.w	80029d8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002880:	4b5e      	ldr	r3, [pc, #376]	; (80029fc <HAL_GPIO_Init+0x2f0>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a5d      	ldr	r2, [pc, #372]	; (80029fc <HAL_GPIO_Init+0x2f0>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b5b      	ldr	r3, [pc, #364]	; (80029fc <HAL_GPIO_Init+0x2f0>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	60bb      	str	r3, [r7, #8]
 8002896:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002898:	4a59      	ldr	r2, [pc, #356]	; (8002a00 <HAL_GPIO_Init+0x2f4>)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	089b      	lsrs	r3, r3, #2
 800289e:	3302      	adds	r3, #2
 80028a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	220f      	movs	r2, #15
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028c2:	d025      	beq.n	8002910 <HAL_GPIO_Init+0x204>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a4f      	ldr	r2, [pc, #316]	; (8002a04 <HAL_GPIO_Init+0x2f8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d01f      	beq.n	800290c <HAL_GPIO_Init+0x200>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a4e      	ldr	r2, [pc, #312]	; (8002a08 <HAL_GPIO_Init+0x2fc>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d019      	beq.n	8002908 <HAL_GPIO_Init+0x1fc>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a4d      	ldr	r2, [pc, #308]	; (8002a0c <HAL_GPIO_Init+0x300>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <HAL_GPIO_Init+0x1f8>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a4c      	ldr	r2, [pc, #304]	; (8002a10 <HAL_GPIO_Init+0x304>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d00d      	beq.n	8002900 <HAL_GPIO_Init+0x1f4>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <HAL_GPIO_Init+0x308>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d007      	beq.n	80028fc <HAL_GPIO_Init+0x1f0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a4a      	ldr	r2, [pc, #296]	; (8002a18 <HAL_GPIO_Init+0x30c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_GPIO_Init+0x1ec>
 80028f4:	2306      	movs	r3, #6
 80028f6:	e00c      	b.n	8002912 <HAL_GPIO_Init+0x206>
 80028f8:	2307      	movs	r3, #7
 80028fa:	e00a      	b.n	8002912 <HAL_GPIO_Init+0x206>
 80028fc:	2305      	movs	r3, #5
 80028fe:	e008      	b.n	8002912 <HAL_GPIO_Init+0x206>
 8002900:	2304      	movs	r3, #4
 8002902:	e006      	b.n	8002912 <HAL_GPIO_Init+0x206>
 8002904:	2303      	movs	r3, #3
 8002906:	e004      	b.n	8002912 <HAL_GPIO_Init+0x206>
 8002908:	2302      	movs	r3, #2
 800290a:	e002      	b.n	8002912 <HAL_GPIO_Init+0x206>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_GPIO_Init+0x206>
 8002910:	2300      	movs	r3, #0
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	f002 0203 	and.w	r2, r2, #3
 8002918:	0092      	lsls	r2, r2, #2
 800291a:	4093      	lsls	r3, r2
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4313      	orrs	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002922:	4937      	ldr	r1, [pc, #220]	; (8002a00 <HAL_GPIO_Init+0x2f4>)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	3302      	adds	r3, #2
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002930:	4b3a      	ldr	r3, [pc, #232]	; (8002a1c <HAL_GPIO_Init+0x310>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002954:	4a31      	ldr	r2, [pc, #196]	; (8002a1c <HAL_GPIO_Init+0x310>)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800295a:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <HAL_GPIO_Init+0x310>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800297e:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <HAL_GPIO_Init+0x310>)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002984:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_GPIO_Init+0x310>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	43db      	mvns	r3, r3
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4013      	ands	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029a8:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <HAL_GPIO_Init+0x310>)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_GPIO_Init+0x310>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4013      	ands	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <HAL_GPIO_Init+0x310>)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3301      	adds	r3, #1
 80029dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	fa22 f303 	lsr.w	r3, r2, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f47f ae97 	bne.w	800271c <HAL_GPIO_Init+0x10>
  }
}
 80029ee:	bf00      	nop
 80029f0:	371c      	adds	r7, #28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40010000 	.word	0x40010000
 8002a04:	48000400 	.word	0x48000400
 8002a08:	48000800 	.word	0x48000800
 8002a0c:	48000c00 	.word	0x48000c00
 8002a10:	48001000 	.word	0x48001000
 8002a14:	48001400 	.word	0x48001400
 8002a18:	48001800 	.word	0x48001800
 8002a1c:	40010400 	.word	0x40010400

08002a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a30:	787b      	ldrb	r3, [r7, #1]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a3c:	e002      	b.n	8002a44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e081      	b.n	8002b66 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7fe fafc 	bl	8001074 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2224      	movs	r2, #36	; 0x24
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0201 	bic.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002aa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689a      	ldr	r2, [r3, #8]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ab0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d107      	bne.n	8002aca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	e006      	b.n	8002ad8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689a      	ldr	r2, [r3, #8]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ad6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d104      	bne.n	8002aea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ae8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	ea42 0103 	orr.w	r1, r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	021a      	lsls	r2, r3, #8
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	69d9      	ldr	r1, [r3, #28]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1a      	ldr	r2, [r3, #32]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	817b      	strh	r3, [r7, #10]
 8002b80:	4613      	mov	r3, r2
 8002b82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	f040 80da 	bne.w	8002d46 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_I2C_Master_Transmit+0x30>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e0d3      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1d8>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fbe8 	bl	800137c <HAL_GetTick>
 8002bac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	2319      	movs	r3, #25
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f9e6 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0be      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2221      	movs	r2, #33	; 0x21
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2210      	movs	r2, #16
 8002bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	893a      	ldrh	r2, [r7, #8]
 8002bea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2bff      	cmp	r3, #255	; 0xff
 8002bfa:	d90e      	bls.n	8002c1a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	22ff      	movs	r2, #255	; 0xff
 8002c00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	8979      	ldrh	r1, [r7, #10]
 8002c0a:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fb48 	bl	80032a8 <I2C_TransferConfig>
 8002c18:	e06c      	b.n	8002cf4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	8979      	ldrh	r1, [r7, #10]
 8002c2c:	4b48      	ldr	r3, [pc, #288]	; (8002d50 <HAL_I2C_Master_Transmit+0x1e0>)
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 fb37 	bl	80032a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002c3a:	e05b      	b.n	8002cf4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	6a39      	ldr	r1, [r7, #32]
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f9e3 	bl	800300c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e07b      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	781a      	ldrb	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d034      	beq.n	8002cf4 <HAL_I2C_Master_Transmit+0x184>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d130      	bne.n	8002cf4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 f975 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e04d      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2bff      	cmp	r3, #255	; 0xff
 8002cb4:	d90e      	bls.n	8002cd4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	22ff      	movs	r2, #255	; 0xff
 8002cba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	8979      	ldrh	r1, [r7, #10]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 faeb 	bl	80032a8 <I2C_TransferConfig>
 8002cd2:	e00f      	b.n	8002cf4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	8979      	ldrh	r1, [r7, #10]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fada 	bl	80032a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d19e      	bne.n	8002c3c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	6a39      	ldr	r1, [r7, #32]
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f9c2 	bl	800308c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e01a      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2220      	movs	r2, #32
 8002d18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_I2C_Master_Transmit+0x1e4>)
 8002d26:	400b      	ands	r3, r1
 8002d28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
  }
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	80002000 	.word	0x80002000
 8002d54:	fe00e800 	.word	0xfe00e800

08002d58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	607a      	str	r2, [r7, #4]
 8002d62:	461a      	mov	r2, r3
 8002d64:	460b      	mov	r3, r1
 8002d66:	817b      	strh	r3, [r7, #10]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	f040 80db 	bne.w	8002f30 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_I2C_Master_Receive+0x30>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e0d4      	b.n	8002f32 <HAL_I2C_Master_Receive+0x1da>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d90:	f7fe faf4 	bl	800137c <HAL_GetTick>
 8002d94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	2319      	movs	r3, #25
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 f8f2 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0bf      	b.n	8002f32 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2222      	movs	r2, #34	; 0x22
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2210      	movs	r2, #16
 8002dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	893a      	ldrh	r2, [r7, #8]
 8002dd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2bff      	cmp	r3, #255	; 0xff
 8002de2:	d90e      	bls.n	8002e02 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	22ff      	movs	r2, #255	; 0xff
 8002de8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	8979      	ldrh	r1, [r7, #10]
 8002df2:	4b52      	ldr	r3, [pc, #328]	; (8002f3c <HAL_I2C_Master_Receive+0x1e4>)
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fa54 	bl	80032a8 <I2C_TransferConfig>
 8002e00:	e06d      	b.n	8002ede <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	8979      	ldrh	r1, [r7, #10]
 8002e14:	4b49      	ldr	r3, [pc, #292]	; (8002f3c <HAL_I2C_Master_Receive+0x1e4>)
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 fa43 	bl	80032a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002e22:	e05c      	b.n	8002ede <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	6a39      	ldr	r1, [r7, #32]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f000 f96b 	bl	8003104 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e07c      	b.n	8002f32 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d034      	beq.n	8002ede <HAL_I2C_Master_Receive+0x186>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d130      	bne.n	8002ede <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	2200      	movs	r2, #0
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f880 	bl	8002f8c <I2C_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e04d      	b.n	8002f32 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2bff      	cmp	r3, #255	; 0xff
 8002e9e:	d90e      	bls.n	8002ebe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	8979      	ldrh	r1, [r7, #10]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f9f6 	bl	80032a8 <I2C_TransferConfig>
 8002ebc:	e00f      	b.n	8002ede <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	8979      	ldrh	r1, [r7, #10]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f9e5 	bl	80032a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d19d      	bne.n	8002e24 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	6a39      	ldr	r1, [r7, #32]
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f8cd 	bl	800308c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e01a      	b.n	8002f32 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2220      	movs	r2, #32
 8002f02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6859      	ldr	r1, [r3, #4]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_I2C_Master_Receive+0x1e8>)
 8002f10:	400b      	ands	r3, r1
 8002f12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	80002400 	.word	0x80002400
 8002f40:	fe00e800 	.word	0xfe00e800

08002f44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d103      	bne.n	8002f62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d007      	beq.n	8002f80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699a      	ldr	r2, [r3, #24]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	619a      	str	r2, [r3, #24]
  }
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f9c:	e022      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa4:	d01e      	beq.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe f9e9 	bl	800137c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d113      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e00f      	b.n	8003004 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4013      	ands	r3, r2
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d0cd      	beq.n	8002f9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003018:	e02c      	b.n	8003074 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f8dc 	bl	80031dc <I2C_IsAcknowledgeFailed>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e02a      	b.n	8003084 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d01e      	beq.n	8003074 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fe f9a1 	bl	800137c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d113      	bne.n	8003074 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e007      	b.n	8003084 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b02      	cmp	r3, #2
 8003080:	d1cb      	bne.n	800301a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003098:	e028      	b.n	80030ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f89c 	bl	80031dc <I2C_IsAcknowledgeFailed>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e026      	b.n	80030fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ae:	f7fe f965 	bl	800137c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d302      	bcc.n	80030c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d113      	bne.n	80030ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c8:	f043 0220 	orr.w	r2, r3, #32
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e007      	b.n	80030fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d1cf      	bne.n	800309a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003110:	e055      	b.n	80031be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	68b9      	ldr	r1, [r7, #8]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f860 	bl	80031dc <I2C_IsAcknowledgeFailed>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e053      	b.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b20      	cmp	r3, #32
 8003132:	d129      	bne.n	8003188 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	2b04      	cmp	r3, #4
 8003140:	d105      	bne.n	800314e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e03f      	b.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2220      	movs	r2, #32
 8003154:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003162:	400b      	ands	r3, r1
 8003164:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e022      	b.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003188:	f7fe f8f8 	bl	800137c <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	429a      	cmp	r2, r3
 8003196:	d302      	bcc.n	800319e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f043 0220 	orr.w	r2, r3, #32
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e007      	b.n	80031ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d1a2      	bne.n	8003112 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	fe00e800 	.word	0xfe00e800

080031dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d151      	bne.n	800329a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f6:	e022      	b.n	800323e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fe:	d01e      	beq.n	800323e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003200:	f7fe f8bc 	bl	800137c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	429a      	cmp	r2, r3
 800320e:	d302      	bcc.n	8003216 <I2C_IsAcknowledgeFailed+0x3a>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d113      	bne.n	800323e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e02e      	b.n	800329c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b20      	cmp	r3, #32
 800324a:	d1d5      	bne.n	80031f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2210      	movs	r2, #16
 8003252:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2220      	movs	r2, #32
 800325a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f7ff fe71 	bl	8002f44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6859      	ldr	r1, [r3, #4]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <I2C_IsAcknowledgeFailed+0xc8>)
 800326e:	400b      	ands	r3, r1
 8003270:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f043 0204 	orr.w	r2, r3, #4
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	fe00e800 	.word	0xfe00e800

080032a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	460b      	mov	r3, r1
 80032b4:	817b      	strh	r3, [r7, #10]
 80032b6:	4613      	mov	r3, r2
 80032b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	0d5b      	lsrs	r3, r3, #21
 80032c4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <I2C_TransferConfig+0x58>)
 80032ca:	430b      	orrs	r3, r1
 80032cc:	43db      	mvns	r3, r3
 80032ce:	ea02 0103 	and.w	r1, r2, r3
 80032d2:	897b      	ldrh	r3, [r7, #10]
 80032d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032d8:	7a7b      	ldrb	r3, [r7, #9]
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	03ff63ff 	.word	0x03ff63ff

08003304 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b20      	cmp	r3, #32
 8003318:	d138      	bne.n	800338c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003324:	2302      	movs	r3, #2
 8003326:	e032      	b.n	800338e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2224      	movs	r2, #36	; 0x24
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003356:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6819      	ldr	r1, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f042 0201 	orr.w	r2, r2, #1
 8003376:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	e000      	b.n	800338e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800338c:	2302      	movs	r3, #2
  }
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b20      	cmp	r3, #32
 80033ae:	d139      	bne.n	8003424 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e033      	b.n	8003426 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2224      	movs	r2, #36	; 0x24
 80033ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	021b      	lsls	r3, r3, #8
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e000      	b.n	8003426 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003424:	2302      	movs	r3, #2
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
	...

08003434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800343a:	af00      	add	r7, sp, #0
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d102      	bne.n	800344e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f000 bf01 	b.w	8004250 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8160 	beq.w	800371e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800345e:	4bae      	ldr	r3, [pc, #696]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b04      	cmp	r3, #4
 8003468:	d00c      	beq.n	8003484 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800346a:	4bab      	ldr	r3, [pc, #684]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b08      	cmp	r3, #8
 8003474:	d159      	bne.n	800352a <HAL_RCC_OscConfig+0xf6>
 8003476:	4ba8      	ldr	r3, [pc, #672]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800347e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003482:	d152      	bne.n	800352a <HAL_RCC_OscConfig+0xf6>
 8003484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003488:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003498:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349c:	fab3 f383 	clz	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_OscConfig+0x82>
 80034b0:	4b99      	ldr	r3, [pc, #612]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	e015      	b.n	80034e2 <HAL_RCC_OscConfig+0xae>
 80034b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80034ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034ce:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80034d2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80034d6:	fa93 f3a3 	rbit	r3, r3
 80034da:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80034de:	4b8e      	ldr	r3, [pc, #568]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034e6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80034ea:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80034ee:	fa92 f2a2 	rbit	r2, r2
 80034f2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80034f6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80034fa:	fab2 f282 	clz	r2, r2
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	f042 0220 	orr.w	r2, r2, #32
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	f002 021f 	and.w	r2, r2, #31
 800350a:	2101      	movs	r1, #1
 800350c:	fa01 f202 	lsl.w	r2, r1, r2
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	f000 8102 	beq.w	800371c <HAL_RCC_OscConfig+0x2e8>
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 80fc 	bne.w	800371c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	f000 be93 	b.w	8004250 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800352a:	1d3b      	adds	r3, r7, #4
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003534:	d106      	bne.n	8003544 <HAL_RCC_OscConfig+0x110>
 8003536:	4b78      	ldr	r3, [pc, #480]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a77      	ldr	r2, [pc, #476]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e030      	b.n	80035a6 <HAL_RCC_OscConfig+0x172>
 8003544:	1d3b      	adds	r3, r7, #4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x134>
 800354e:	4b72      	ldr	r3, [pc, #456]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a71      	ldr	r2, [pc, #452]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 8003554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b6f      	ldr	r3, [pc, #444]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6e      	ldr	r2, [pc, #440]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 8003560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e01e      	b.n	80035a6 <HAL_RCC_OscConfig+0x172>
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003572:	d10c      	bne.n	800358e <HAL_RCC_OscConfig+0x15a>
 8003574:	4b68      	ldr	r3, [pc, #416]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a67      	ldr	r2, [pc, #412]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 800357a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b65      	ldr	r3, [pc, #404]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a64      	ldr	r2, [pc, #400]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 8003586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	e00b      	b.n	80035a6 <HAL_RCC_OscConfig+0x172>
 800358e:	4b62      	ldr	r3, [pc, #392]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a61      	ldr	r2, [pc, #388]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 8003594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	4b5f      	ldr	r3, [pc, #380]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a5e      	ldr	r2, [pc, #376]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 80035a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a6:	1d3b      	adds	r3, r7, #4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d059      	beq.n	8003664 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fd fee4 	bl	800137c <HAL_GetTick>
 80035b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ba:	f7fd fedf 	bl	800137c <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	; 0x64
 80035c8:	d902      	bls.n	80035d0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	f000 be40 	b.w	8004250 <HAL_RCC_OscConfig+0xe1c>
 80035d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035d4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80035e4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035e8:	fab3 f383 	clz	r3, r3
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d102      	bne.n	8003602 <HAL_RCC_OscConfig+0x1ce>
 80035fc:	4b46      	ldr	r3, [pc, #280]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	e015      	b.n	800362e <HAL_RCC_OscConfig+0x1fa>
 8003602:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003606:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003616:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800361a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800361e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800362a:	4b3b      	ldr	r3, [pc, #236]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003632:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003636:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800363a:	fa92 f2a2 	rbit	r2, r2
 800363e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003642:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003646:	fab2 f282 	clz	r2, r2
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	f042 0220 	orr.w	r2, r2, #32
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	f002 021f 	and.w	r2, r2, #31
 8003656:	2101      	movs	r1, #1
 8003658:	fa01 f202 	lsl.w	r2, r1, r2
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ab      	beq.n	80035ba <HAL_RCC_OscConfig+0x186>
 8003662:	e05c      	b.n	800371e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fd fe8a 	bl	800137c <HAL_GetTick>
 8003668:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800366e:	f7fd fe85 	bl	800137c <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b64      	cmp	r3, #100	; 0x64
 800367c:	d902      	bls.n	8003684 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	f000 bde6 	b.w	8004250 <HAL_RCC_OscConfig+0xe1c>
 8003684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003688:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003690:	fa93 f3a3 	rbit	r3, r3
 8003694:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003698:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d102      	bne.n	80036b6 <HAL_RCC_OscConfig+0x282>
 80036b0:	4b19      	ldr	r3, [pc, #100]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	e015      	b.n	80036e2 <HAL_RCC_OscConfig+0x2ae>
 80036b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ba:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80036ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80036d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036d6:	fa93 f3a3 	rbit	r3, r3
 80036da:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80036de:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <HAL_RCC_OscConfig+0x2e4>)
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036e6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80036ea:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80036ee:	fa92 f2a2 	rbit	r2, r2
 80036f2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80036f6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80036fa:	fab2 f282 	clz	r2, r2
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	f042 0220 	orr.w	r2, r2, #32
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	f002 021f 	and.w	r2, r2, #31
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f202 	lsl.w	r2, r1, r2
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1ab      	bne.n	800366e <HAL_RCC_OscConfig+0x23a>
 8003716:	e002      	b.n	800371e <HAL_RCC_OscConfig+0x2ea>
 8003718:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 8170 	beq.w	8003a0e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800372e:	4bd0      	ldr	r3, [pc, #832]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800373a:	4bcd      	ldr	r3, [pc, #820]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b08      	cmp	r3, #8
 8003744:	d16d      	bne.n	8003822 <HAL_RCC_OscConfig+0x3ee>
 8003746:	4bca      	ldr	r3, [pc, #808]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800374e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003752:	d166      	bne.n	8003822 <HAL_RCC_OscConfig+0x3ee>
 8003754:	2302      	movs	r3, #2
 8003756:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003766:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376a:	fab3 f383 	clz	r3, r3
 800376e:	b2db      	uxtb	r3, r3
 8003770:	095b      	lsrs	r3, r3, #5
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b01      	cmp	r3, #1
 800377c:	d102      	bne.n	8003784 <HAL_RCC_OscConfig+0x350>
 800377e:	4bbc      	ldr	r3, [pc, #752]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	e013      	b.n	80037ac <HAL_RCC_OscConfig+0x378>
 8003784:	2302      	movs	r3, #2
 8003786:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003796:	2302      	movs	r3, #2
 8003798:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800379c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80037a0:	fa93 f3a3 	rbit	r3, r3
 80037a4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80037a8:	4bb1      	ldr	r3, [pc, #708]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	2202      	movs	r2, #2
 80037ae:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80037b2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80037b6:	fa92 f2a2 	rbit	r2, r2
 80037ba:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80037be:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80037c2:	fab2 f282 	clz	r2, r2
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	f042 0220 	orr.w	r2, r2, #32
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	f002 021f 	and.w	r2, r2, #31
 80037d2:	2101      	movs	r1, #1
 80037d4:	fa01 f202 	lsl.w	r2, r1, r2
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_RCC_OscConfig+0x3ba>
 80037de:	1d3b      	adds	r3, r7, #4
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d002      	beq.n	80037ee <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f000 bd31 	b.w	8004250 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ee:	4ba0      	ldr	r3, [pc, #640]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f6:	1d3b      	adds	r3, r7, #4
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	21f8      	movs	r1, #248	; 0xf8
 80037fe:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003806:	fa91 f1a1 	rbit	r1, r1
 800380a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800380e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003812:	fab1 f181 	clz	r1, r1
 8003816:	b2c9      	uxtb	r1, r1
 8003818:	408b      	lsls	r3, r1
 800381a:	4995      	ldr	r1, [pc, #596]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003820:	e0f5      	b.n	8003a0e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003822:	1d3b      	adds	r3, r7, #4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 8085 	beq.w	8003938 <HAL_RCC_OscConfig+0x504>
 800382e:	2301      	movs	r3, #1
 8003830:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003840:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003844:	fab3 f383 	clz	r3, r3
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800384e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	461a      	mov	r2, r3
 8003856:	2301      	movs	r3, #1
 8003858:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fd fd8f 	bl	800137c <HAL_GetTick>
 800385e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003862:	e00a      	b.n	800387a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003864:	f7fd fd8a 	bl	800137c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d902      	bls.n	800387a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	f000 bceb 	b.w	8004250 <HAL_RCC_OscConfig+0xe1c>
 800387a:	2302      	movs	r3, #2
 800387c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800388c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003890:	fab3 f383 	clz	r3, r3
 8003894:	b2db      	uxtb	r3, r3
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d102      	bne.n	80038aa <HAL_RCC_OscConfig+0x476>
 80038a4:	4b72      	ldr	r3, [pc, #456]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	e013      	b.n	80038d2 <HAL_RCC_OscConfig+0x49e>
 80038aa:	2302      	movs	r3, #2
 80038ac:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80038bc:	2302      	movs	r3, #2
 80038be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038c2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80038c6:	fa93 f3a3 	rbit	r3, r3
 80038ca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038ce:	4b68      	ldr	r3, [pc, #416]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	2202      	movs	r2, #2
 80038d4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80038d8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80038dc:	fa92 f2a2 	rbit	r2, r2
 80038e0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80038e4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80038e8:	fab2 f282 	clz	r2, r2
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	f042 0220 	orr.w	r2, r2, #32
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	f002 021f 	and.w	r2, r2, #31
 80038f8:	2101      	movs	r1, #1
 80038fa:	fa01 f202 	lsl.w	r2, r1, r2
 80038fe:	4013      	ands	r3, r2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0af      	beq.n	8003864 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003904:	4b5a      	ldr	r3, [pc, #360]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	21f8      	movs	r1, #248	; 0xf8
 8003914:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800391c:	fa91 f1a1 	rbit	r1, r1
 8003920:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003924:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003928:	fab1 f181 	clz	r1, r1
 800392c:	b2c9      	uxtb	r1, r1
 800392e:	408b      	lsls	r3, r1
 8003930:	494f      	ldr	r1, [pc, #316]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]
 8003936:	e06a      	b.n	8003a0e <HAL_RCC_OscConfig+0x5da>
 8003938:	2301      	movs	r3, #1
 800393a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003942:	fa93 f3a3 	rbit	r3, r3
 8003946:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800394a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003958:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	461a      	mov	r2, r3
 8003960:	2300      	movs	r3, #0
 8003962:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fd fd0a 	bl	800137c <HAL_GetTick>
 8003968:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396c:	e00a      	b.n	8003984 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800396e:	f7fd fd05 	bl	800137c <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d902      	bls.n	8003984 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	f000 bc66 	b.w	8004250 <HAL_RCC_OscConfig+0xe1c>
 8003984:	2302      	movs	r3, #2
 8003986:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003996:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	fab3 f383 	clz	r3, r3
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d102      	bne.n	80039b4 <HAL_RCC_OscConfig+0x580>
 80039ae:	4b30      	ldr	r3, [pc, #192]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e013      	b.n	80039dc <HAL_RCC_OscConfig+0x5a8>
 80039b4:	2302      	movs	r3, #2
 80039b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80039be:	fa93 f3a3 	rbit	r3, r3
 80039c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80039c6:	2302      	movs	r3, #2
 80039c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80039d0:	fa93 f3a3 	rbit	r3, r3
 80039d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80039d8:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <HAL_RCC_OscConfig+0x63c>)
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	2202      	movs	r2, #2
 80039de:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80039e2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80039e6:	fa92 f2a2 	rbit	r2, r2
 80039ea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80039ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80039f2:	fab2 f282 	clz	r2, r2
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	f042 0220 	orr.w	r2, r2, #32
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	f002 021f 	and.w	r2, r2, #31
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1af      	bne.n	800396e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80da 	beq.w	8003bd2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d069      	beq.n	8003afc <HAL_RCC_OscConfig+0x6c8>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a32:	fa93 f3a3 	rbit	r3, r3
 8003a36:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003a3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_RCC_OscConfig+0x640>)
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2301      	movs	r3, #1
 8003a50:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a52:	f7fd fc93 	bl	800137c <HAL_GetTick>
 8003a56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5a:	e00d      	b.n	8003a78 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a5c:	f7fd fc8e 	bl	800137c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d905      	bls.n	8003a78 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e3ef      	b.n	8004250 <HAL_RCC_OscConfig+0xe1c>
 8003a70:	40021000 	.word	0x40021000
 8003a74:	10908120 	.word	0x10908120
 8003a78:	2302      	movs	r3, #2
 8003a7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a82:	fa93 f2a3 	rbit	r2, r3
 8003a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003a90:	2202      	movs	r2, #2
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	fa93 f2a3 	rbit	r2, r3
 8003a9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	fa93 f2a3 	rbit	r2, r3
 8003ab6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003aba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003abc:	4ba4      	ldr	r3, [pc, #656]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	6019      	str	r1, [r3, #0]
 8003ac8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	fa93 f1a3 	rbit	r1, r3
 8003ad2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003ad6:	6019      	str	r1, [r3, #0]
  return result;
 8003ad8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	fab3 f383 	clz	r3, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	2101      	movs	r1, #1
 8003af0:	fa01 f303 	lsl.w	r3, r1, r3
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0b0      	beq.n	8003a5c <HAL_RCC_OscConfig+0x628>
 8003afa:	e06a      	b.n	8003bd2 <HAL_RCC_OscConfig+0x79e>
 8003afc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	fa93 f2a3 	rbit	r2, r3
 8003b0e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003b12:	601a      	str	r2, [r3, #0]
  return result;
 8003b14:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003b18:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b8c      	ldr	r3, [pc, #560]	; (8003d54 <HAL_RCC_OscConfig+0x920>)
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fc25 	bl	800137c <HAL_GetTick>
 8003b32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b36:	e009      	b.n	8003b4c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b38:	f7fd fc20 	bl	800137c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e381      	b.n	8004250 <HAL_RCC_OscConfig+0xe1c>
 8003b4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b50:	2202      	movs	r2, #2
 8003b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f2a3 	rbit	r2, r3
 8003b5e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b68:	2202      	movs	r2, #2
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	fa93 f2a3 	rbit	r2, r3
 8003b76:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b80:	2202      	movs	r2, #2
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	fa93 f2a3 	rbit	r2, r3
 8003b8e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003b92:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b94:	4b6e      	ldr	r3, [pc, #440]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	6019      	str	r1, [r3, #0]
 8003ba0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	fa93 f1a3 	rbit	r1, r3
 8003baa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003bae:	6019      	str	r1, [r3, #0]
  return result;
 8003bb0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	fab3 f383 	clz	r3, r3
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1b2      	bne.n	8003b38 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd2:	1d3b      	adds	r3, r7, #4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8157 	beq.w	8003e90 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be2:	2300      	movs	r3, #0
 8003be4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be8:	4b59      	ldr	r3, [pc, #356]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d112      	bne.n	8003c1a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf4:	4b56      	ldr	r3, [pc, #344]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	4a55      	ldr	r2, [pc, #340]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	61d3      	str	r3, [r2, #28]
 8003c00:	4b53      	ldr	r3, [pc, #332]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003c08:	f107 030c 	add.w	r3, r7, #12
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c1a:	4b4f      	ldr	r3, [pc, #316]	; (8003d58 <HAL_RCC_OscConfig+0x924>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d11a      	bne.n	8003c5c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c26:	4b4c      	ldr	r3, [pc, #304]	; (8003d58 <HAL_RCC_OscConfig+0x924>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a4b      	ldr	r2, [pc, #300]	; (8003d58 <HAL_RCC_OscConfig+0x924>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c30:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c32:	f7fd fba3 	bl	800137c <HAL_GetTick>
 8003c36:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3a:	e009      	b.n	8003c50 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3c:	f7fd fb9e 	bl	800137c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b64      	cmp	r3, #100	; 0x64
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e2ff      	b.n	8004250 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c50:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <HAL_RCC_OscConfig+0x924>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d0ef      	beq.n	8003c3c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c5c:	1d3b      	adds	r3, r7, #4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d106      	bne.n	8003c74 <HAL_RCC_OscConfig+0x840>
 8003c66:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	4a39      	ldr	r2, [pc, #228]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6213      	str	r3, [r2, #32]
 8003c72:	e02f      	b.n	8003cd4 <HAL_RCC_OscConfig+0x8a0>
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x864>
 8003c7e:	4b34      	ldr	r3, [pc, #208]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4a33      	ldr	r2, [pc, #204]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003c84:	f023 0301 	bic.w	r3, r3, #1
 8003c88:	6213      	str	r3, [r2, #32]
 8003c8a:	4b31      	ldr	r3, [pc, #196]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4a30      	ldr	r2, [pc, #192]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	6213      	str	r3, [r2, #32]
 8003c96:	e01d      	b.n	8003cd4 <HAL_RCC_OscConfig+0x8a0>
 8003c98:	1d3b      	adds	r3, r7, #4
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b05      	cmp	r3, #5
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x888>
 8003ca2:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	4a2a      	ldr	r2, [pc, #168]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003ca8:	f043 0304 	orr.w	r3, r3, #4
 8003cac:	6213      	str	r3, [r2, #32]
 8003cae:	4b28      	ldr	r3, [pc, #160]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003cb4:	f043 0301 	orr.w	r3, r3, #1
 8003cb8:	6213      	str	r3, [r2, #32]
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0x8a0>
 8003cbc:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003cc2:	f023 0301 	bic.w	r3, r3, #1
 8003cc6:	6213      	str	r3, [r2, #32]
 8003cc8:	4b21      	ldr	r3, [pc, #132]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	4a20      	ldr	r2, [pc, #128]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003cce:	f023 0304 	bic.w	r3, r3, #4
 8003cd2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cd4:	1d3b      	adds	r3, r7, #4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d06a      	beq.n	8003db4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cde:	f7fd fb4d 	bl	800137c <HAL_GetTick>
 8003ce2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fd fb48 	bl	800137c <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e2a7      	b.n	8004250 <HAL_RCC_OscConfig+0xe1c>
 8003d00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d04:	2202      	movs	r2, #2
 8003d06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	fa93 f2a3 	rbit	r2, r3
 8003d12:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	fa93 f2a3 	rbit	r2, r3
 8003d2a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003d2e:	601a      	str	r2, [r3, #0]
  return result;
 8003d30:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003d34:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d108      	bne.n	8003d5c <HAL_RCC_OscConfig+0x928>
 8003d4a:	4b01      	ldr	r3, [pc, #4]	; (8003d50 <HAL_RCC_OscConfig+0x91c>)
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	e013      	b.n	8003d78 <HAL_RCC_OscConfig+0x944>
 8003d50:	40021000 	.word	0x40021000
 8003d54:	10908120 	.word	0x10908120
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003d60:	2202      	movs	r2, #2
 8003d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	fa93 f2a3 	rbit	r2, r3
 8003d6e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	4bc0      	ldr	r3, [pc, #768]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	6011      	str	r1, [r2, #0]
 8003d80:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	fa92 f1a2 	rbit	r1, r2
 8003d8a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d8e:	6011      	str	r1, [r2, #0]
  return result;
 8003d90:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	fab2 f282 	clz	r2, r2
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	f002 021f 	and.w	r2, r2, #31
 8003da6:	2101      	movs	r1, #1
 8003da8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d09a      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x8b4>
 8003db2:	e063      	b.n	8003e7c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db4:	f7fd fae2 	bl	800137c <HAL_GetTick>
 8003db8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dbc:	e00b      	b.n	8003dd6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dbe:	f7fd fadd 	bl	800137c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e23c      	b.n	8004250 <HAL_RCC_OscConfig+0xe1c>
 8003dd6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003dda:	2202      	movs	r2, #2
 8003ddc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	fa93 f2a3 	rbit	r2, r3
 8003de8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003df2:	2202      	movs	r2, #2
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	fa93 f2a3 	rbit	r2, r3
 8003e00:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e04:	601a      	str	r2, [r3, #0]
  return result;
 8003e06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003e0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0c:	fab3 f383 	clz	r3, r3
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f043 0302 	orr.w	r3, r3, #2
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d102      	bne.n	8003e26 <HAL_RCC_OscConfig+0x9f2>
 8003e20:	4b95      	ldr	r3, [pc, #596]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	e00d      	b.n	8003e42 <HAL_RCC_OscConfig+0xa0e>
 8003e26:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	fa93 f2a3 	rbit	r2, r3
 8003e38:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	4b8e      	ldr	r3, [pc, #568]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003e46:	2102      	movs	r1, #2
 8003e48:	6011      	str	r1, [r2, #0]
 8003e4a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003e4e:	6812      	ldr	r2, [r2, #0]
 8003e50:	fa92 f1a2 	rbit	r1, r2
 8003e54:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e58:	6011      	str	r1, [r2, #0]
  return result;
 8003e5a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003e5e:	6812      	ldr	r2, [r2, #0]
 8003e60:	fab2 f282 	clz	r2, r2
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	f002 021f 	and.w	r2, r2, #31
 8003e70:	2101      	movs	r1, #1
 8003e72:	fa01 f202 	lsl.w	r2, r1, r2
 8003e76:	4013      	ands	r3, r2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1a0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e7c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e84:	4b7c      	ldr	r3, [pc, #496]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8003e86:	69db      	ldr	r3, [r3, #28]
 8003e88:	4a7b      	ldr	r2, [pc, #492]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8003e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 81d9 	beq.w	800424e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e9c:	4b76      	ldr	r3, [pc, #472]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	f000 81a6 	beq.w	80041f6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	f040 811e 	bne.w	80040f2 <HAL_RCC_OscConfig+0xcbe>
 8003eb6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003eba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	fa93 f2a3 	rbit	r2, r3
 8003eca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ece:	601a      	str	r2, [r3, #0]
  return result;
 8003ed0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ed4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ee0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fd fa46 	bl	800137c <HAL_GetTick>
 8003ef0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef4:	e009      	b.n	8003f0a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fd fa41 	bl	800137c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e1a2      	b.n	8004250 <HAL_RCC_OscConfig+0xe1c>
 8003f0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	fa93 f2a3 	rbit	r2, r3
 8003f1e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f22:	601a      	str	r2, [r3, #0]
  return result;
 8003f24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003f28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f2a:	fab3 f383 	clz	r3, r3
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d102      	bne.n	8003f44 <HAL_RCC_OscConfig+0xb10>
 8003f3e:	4b4e      	ldr	r3, [pc, #312]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	e01b      	b.n	8003f7c <HAL_RCC_OscConfig+0xb48>
 8003f44:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	fa93 f2a3 	rbit	r2, r3
 8003f58:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	fa93 f2a3 	rbit	r2, r3
 8003f72:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	4b3f      	ldr	r3, [pc, #252]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003f80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f84:	6011      	str	r1, [r2, #0]
 8003f86:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	fa92 f1a2 	rbit	r1, r2
 8003f90:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f94:	6011      	str	r1, [r2, #0]
  return result;
 8003f96:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	fab2 f282 	clz	r2, r2
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	f042 0220 	orr.w	r2, r2, #32
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	f002 021f 	and.w	r2, r2, #31
 8003fac:	2101      	movs	r1, #1
 8003fae:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d19e      	bne.n	8003ef6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fb8:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	f023 020f 	bic.w	r2, r3, #15
 8003fc0:	1d3b      	adds	r3, r7, #4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc6:	492c      	ldr	r1, [pc, #176]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003fcc:	4b2a      	ldr	r3, [pc, #168]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003fd4:	1d3b      	adds	r3, r7, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6a19      	ldr	r1, [r3, #32]
 8003fda:	1d3b      	adds	r3, r7, #4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	430b      	orrs	r3, r1
 8003fe2:	4925      	ldr	r1, [pc, #148]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	604b      	str	r3, [r1, #4]
 8003fe8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003fec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ff0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	fa93 f2a3 	rbit	r2, r3
 8003ffc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004000:	601a      	str	r2, [r3, #0]
  return result;
 8004002:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004006:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004008:	fab3 f383 	clz	r3, r3
 800400c:	b2db      	uxtb	r3, r3
 800400e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004012:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	461a      	mov	r2, r3
 800401a:	2301      	movs	r3, #1
 800401c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401e:	f7fd f9ad 	bl	800137c <HAL_GetTick>
 8004022:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004026:	e009      	b.n	800403c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd f9a8 	bl	800137c <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e109      	b.n	8004250 <HAL_RCC_OscConfig+0xe1c>
 800403c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004040:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	fa93 f2a3 	rbit	r2, r3
 8004050:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004054:	601a      	str	r2, [r3, #0]
  return result;
 8004056:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800405a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800405c:	fab3 f383 	clz	r3, r3
 8004060:	b2db      	uxtb	r3, r3
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d105      	bne.n	800407c <HAL_RCC_OscConfig+0xc48>
 8004070:	4b01      	ldr	r3, [pc, #4]	; (8004078 <HAL_RCC_OscConfig+0xc44>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	e01e      	b.n	80040b4 <HAL_RCC_OscConfig+0xc80>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	fa93 f2a3 	rbit	r2, r3
 8004090:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800409a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800409e:	601a      	str	r2, [r3, #0]
 80040a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	fa93 f2a3 	rbit	r2, r3
 80040aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	4b6a      	ldr	r3, [pc, #424]	; (800425c <HAL_RCC_OscConfig+0xe28>)
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80040b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040bc:	6011      	str	r1, [r2, #0]
 80040be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	fa92 f1a2 	rbit	r1, r2
 80040c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040cc:	6011      	str	r1, [r2, #0]
  return result;
 80040ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	fab2 f282 	clz	r2, r2
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	f042 0220 	orr.w	r2, r2, #32
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	f002 021f 	and.w	r2, r2, #31
 80040e4:	2101      	movs	r1, #1
 80040e6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d09b      	beq.n	8004028 <HAL_RCC_OscConfig+0xbf4>
 80040f0:	e0ad      	b.n	800424e <HAL_RCC_OscConfig+0xe1a>
 80040f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80040fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	fa93 f2a3 	rbit	r2, r3
 8004106:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800410a:	601a      	str	r2, [r3, #0]
  return result;
 800410c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004110:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800411c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	461a      	mov	r2, r3
 8004124:	2300      	movs	r3, #0
 8004126:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7fd f928 	bl	800137c <HAL_GetTick>
 800412c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004130:	e009      	b.n	8004146 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004132:	f7fd f923 	bl	800137c <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e084      	b.n	8004250 <HAL_RCC_OscConfig+0xe1c>
 8004146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800414a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800414e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004150:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	fa93 f2a3 	rbit	r2, r3
 800415a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800415e:	601a      	str	r2, [r3, #0]
  return result;
 8004160:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004164:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d102      	bne.n	8004180 <HAL_RCC_OscConfig+0xd4c>
 800417a:	4b38      	ldr	r3, [pc, #224]	; (800425c <HAL_RCC_OscConfig+0xe28>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	e01b      	b.n	80041b8 <HAL_RCC_OscConfig+0xd84>
 8004180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004184:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004188:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	fa93 f2a3 	rbit	r2, r3
 8004194:	f107 0320 	add.w	r3, r7, #32
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	f107 031c 	add.w	r3, r7, #28
 800419e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	f107 031c 	add.w	r3, r7, #28
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	fa93 f2a3 	rbit	r2, r3
 80041ae:	f107 0318 	add.w	r3, r7, #24
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	4b29      	ldr	r3, [pc, #164]	; (800425c <HAL_RCC_OscConfig+0xe28>)
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	f107 0214 	add.w	r2, r7, #20
 80041bc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80041c0:	6011      	str	r1, [r2, #0]
 80041c2:	f107 0214 	add.w	r2, r7, #20
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	fa92 f1a2 	rbit	r1, r2
 80041cc:	f107 0210 	add.w	r2, r7, #16
 80041d0:	6011      	str	r1, [r2, #0]
  return result;
 80041d2:	f107 0210 	add.w	r2, r7, #16
 80041d6:	6812      	ldr	r2, [r2, #0]
 80041d8:	fab2 f282 	clz	r2, r2
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	f042 0220 	orr.w	r2, r2, #32
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	f002 021f 	and.w	r2, r2, #31
 80041e8:	2101      	movs	r1, #1
 80041ea:	fa01 f202 	lsl.w	r2, r1, r2
 80041ee:	4013      	ands	r3, r2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d19e      	bne.n	8004132 <HAL_RCC_OscConfig+0xcfe>
 80041f4:	e02b      	b.n	800424e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f6:	1d3b      	adds	r3, r7, #4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e025      	b.n	8004250 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004204:	4b15      	ldr	r3, [pc, #84]	; (800425c <HAL_RCC_OscConfig+0xe28>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <HAL_RCC_OscConfig+0xe28>)
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004214:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004218:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800421c:	1d3b      	adds	r3, r7, #4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	429a      	cmp	r2, r3
 8004224:	d111      	bne.n	800424a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004226:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800422a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800422e:	1d3b      	adds	r3, r7, #4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004234:	429a      	cmp	r2, r3
 8004236:	d108      	bne.n	800424a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004238:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800423c:	f003 020f 	and.w	r2, r3, #15
 8004240:	1d3b      	adds	r3, r7, #4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004246:	429a      	cmp	r2, r3
 8004248:	d001      	beq.n	800424e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000

08004260 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b09e      	sub	sp, #120	; 0x78
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e162      	b.n	800453e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004278:	4b90      	ldr	r3, [pc, #576]	; (80044bc <HAL_RCC_ClockConfig+0x25c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d910      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004286:	4b8d      	ldr	r3, [pc, #564]	; (80044bc <HAL_RCC_ClockConfig+0x25c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f023 0207 	bic.w	r2, r3, #7
 800428e:	498b      	ldr	r1, [pc, #556]	; (80044bc <HAL_RCC_ClockConfig+0x25c>)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	4313      	orrs	r3, r2
 8004294:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b89      	ldr	r3, [pc, #548]	; (80044bc <HAL_RCC_ClockConfig+0x25c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e14a      	b.n	800453e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b4:	4b82      	ldr	r3, [pc, #520]	; (80044c0 <HAL_RCC_ClockConfig+0x260>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	497f      	ldr	r1, [pc, #508]	; (80044c0 <HAL_RCC_ClockConfig+0x260>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80dc 	beq.w	800448c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d13c      	bne.n	8004356 <HAL_RCC_ClockConfig+0xf6>
 80042dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042e0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042e4:	fa93 f3a3 	rbit	r3, r3
 80042e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ec:	fab3 f383 	clz	r3, r3
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	095b      	lsrs	r3, r3, #5
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d102      	bne.n	8004306 <HAL_RCC_ClockConfig+0xa6>
 8004300:	4b6f      	ldr	r3, [pc, #444]	; (80044c0 <HAL_RCC_ClockConfig+0x260>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	e00f      	b.n	8004326 <HAL_RCC_ClockConfig+0xc6>
 8004306:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800430a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800430e:	fa93 f3a3 	rbit	r3, r3
 8004312:	667b      	str	r3, [r7, #100]	; 0x64
 8004314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004318:	663b      	str	r3, [r7, #96]	; 0x60
 800431a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004322:	4b67      	ldr	r3, [pc, #412]	; (80044c0 <HAL_RCC_ClockConfig+0x260>)
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800432a:	65ba      	str	r2, [r7, #88]	; 0x58
 800432c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800432e:	fa92 f2a2 	rbit	r2, r2
 8004332:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004334:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004336:	fab2 f282 	clz	r2, r2
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	f042 0220 	orr.w	r2, r2, #32
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	f002 021f 	and.w	r2, r2, #31
 8004346:	2101      	movs	r1, #1
 8004348:	fa01 f202 	lsl.w	r2, r1, r2
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d17b      	bne.n	800444a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e0f3      	b.n	800453e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d13c      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x178>
 800435e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004362:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004366:	fa93 f3a3 	rbit	r3, r3
 800436a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800436c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	fab3 f383 	clz	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d102      	bne.n	8004388 <HAL_RCC_ClockConfig+0x128>
 8004382:	4b4f      	ldr	r3, [pc, #316]	; (80044c0 <HAL_RCC_ClockConfig+0x260>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	e00f      	b.n	80043a8 <HAL_RCC_ClockConfig+0x148>
 8004388:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800438c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004390:	fa93 f3a3 	rbit	r3, r3
 8004394:	647b      	str	r3, [r7, #68]	; 0x44
 8004396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800439a:	643b      	str	r3, [r7, #64]	; 0x40
 800439c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439e:	fa93 f3a3 	rbit	r3, r3
 80043a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a4:	4b46      	ldr	r3, [pc, #280]	; (80044c0 <HAL_RCC_ClockConfig+0x260>)
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80043ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043b0:	fa92 f2a2 	rbit	r2, r2
 80043b4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80043b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043b8:	fab2 f282 	clz	r2, r2
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	f042 0220 	orr.w	r2, r2, #32
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	f002 021f 	and.w	r2, r2, #31
 80043c8:	2101      	movs	r1, #1
 80043ca:	fa01 f202 	lsl.w	r2, r1, r2
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d13a      	bne.n	800444a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0b2      	b.n	800453e <HAL_RCC_ClockConfig+0x2de>
 80043d8:	2302      	movs	r3, #2
 80043da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e6:	fab3 f383 	clz	r3, r3
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	095b      	lsrs	r3, r3, #5
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f043 0301 	orr.w	r3, r3, #1
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d102      	bne.n	8004400 <HAL_RCC_ClockConfig+0x1a0>
 80043fa:	4b31      	ldr	r3, [pc, #196]	; (80044c0 <HAL_RCC_ClockConfig+0x260>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	e00d      	b.n	800441c <HAL_RCC_ClockConfig+0x1bc>
 8004400:	2302      	movs	r3, #2
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	fa93 f3a3 	rbit	r3, r3
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
 800440c:	2302      	movs	r3, #2
 800440e:	623b      	str	r3, [r7, #32]
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	fa93 f3a3 	rbit	r3, r3
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	4b29      	ldr	r3, [pc, #164]	; (80044c0 <HAL_RCC_ClockConfig+0x260>)
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	2202      	movs	r2, #2
 800441e:	61ba      	str	r2, [r7, #24]
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	fa92 f2a2 	rbit	r2, r2
 8004426:	617a      	str	r2, [r7, #20]
  return result;
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	fab2 f282 	clz	r2, r2
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	f042 0220 	orr.w	r2, r2, #32
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	f002 021f 	and.w	r2, r2, #31
 800443a:	2101      	movs	r1, #1
 800443c:	fa01 f202 	lsl.w	r2, r1, r2
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e079      	b.n	800453e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800444a:	4b1d      	ldr	r3, [pc, #116]	; (80044c0 <HAL_RCC_ClockConfig+0x260>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f023 0203 	bic.w	r2, r3, #3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	491a      	ldr	r1, [pc, #104]	; (80044c0 <HAL_RCC_ClockConfig+0x260>)
 8004458:	4313      	orrs	r3, r2
 800445a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800445c:	f7fc ff8e 	bl	800137c <HAL_GetTick>
 8004460:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004462:	e00a      	b.n	800447a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004464:	f7fc ff8a 	bl	800137c <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004472:	4293      	cmp	r3, r2
 8004474:	d901      	bls.n	800447a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e061      	b.n	800453e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447a:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <HAL_RCC_ClockConfig+0x260>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f003 020c 	and.w	r2, r3, #12
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	429a      	cmp	r2, r3
 800448a:	d1eb      	bne.n	8004464 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCC_ClockConfig+0x25c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d214      	bcs.n	80044c4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_RCC_ClockConfig+0x25c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f023 0207 	bic.w	r2, r3, #7
 80044a2:	4906      	ldr	r1, [pc, #24]	; (80044bc <HAL_RCC_ClockConfig+0x25c>)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <HAL_RCC_ClockConfig+0x25c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e040      	b.n	800453e <HAL_RCC_ClockConfig+0x2de>
 80044bc:	40022000 	.word	0x40022000
 80044c0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d0:	4b1d      	ldr	r3, [pc, #116]	; (8004548 <HAL_RCC_ClockConfig+0x2e8>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	491a      	ldr	r1, [pc, #104]	; (8004548 <HAL_RCC_ClockConfig+0x2e8>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ee:	4b16      	ldr	r3, [pc, #88]	; (8004548 <HAL_RCC_ClockConfig+0x2e8>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	4912      	ldr	r1, [pc, #72]	; (8004548 <HAL_RCC_ClockConfig+0x2e8>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004502:	f000 f829 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 8004506:	4601      	mov	r1, r0
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <HAL_RCC_ClockConfig+0x2e8>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004510:	22f0      	movs	r2, #240	; 0xf0
 8004512:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	fa92 f2a2 	rbit	r2, r2
 800451a:	60fa      	str	r2, [r7, #12]
  return result;
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	fab2 f282 	clz	r2, r2
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	40d3      	lsrs	r3, r2
 8004526:	4a09      	ldr	r2, [pc, #36]	; (800454c <HAL_RCC_ClockConfig+0x2ec>)
 8004528:	5cd3      	ldrb	r3, [r2, r3]
 800452a:	fa21 f303 	lsr.w	r3, r1, r3
 800452e:	4a08      	ldr	r2, [pc, #32]	; (8004550 <HAL_RCC_ClockConfig+0x2f0>)
 8004530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004532:	4b08      	ldr	r3, [pc, #32]	; (8004554 <HAL_RCC_ClockConfig+0x2f4>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc fedc 	bl	80012f4 <HAL_InitTick>
  
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3778      	adds	r7, #120	; 0x78
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	08005c78 	.word	0x08005c78
 8004550:	20000000 	.word	0x20000000
 8004554:	20000004 	.word	0x20000004

08004558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004558:	b480      	push	{r7}
 800455a:	b08b      	sub	sp, #44	; 0x2c
 800455c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	2300      	movs	r3, #0
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	2300      	movs	r3, #0
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004572:	4b2a      	ldr	r3, [pc, #168]	; (800461c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b04      	cmp	r3, #4
 8004580:	d002      	beq.n	8004588 <HAL_RCC_GetSysClockFreq+0x30>
 8004582:	2b08      	cmp	r3, #8
 8004584:	d003      	beq.n	800458e <HAL_RCC_GetSysClockFreq+0x36>
 8004586:	e03f      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004588:	4b25      	ldr	r3, [pc, #148]	; (8004620 <HAL_RCC_GetSysClockFreq+0xc8>)
 800458a:	623b      	str	r3, [r7, #32]
      break;
 800458c:	e03f      	b.n	800460e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004594:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004598:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	fa92 f2a2 	rbit	r2, r2
 80045a0:	607a      	str	r2, [r7, #4]
  return result;
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	fab2 f282 	clz	r2, r2
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	40d3      	lsrs	r3, r2
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045ae:	5cd3      	ldrb	r3, [r2, r3]
 80045b0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80045b2:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_RCC_GetSysClockFreq+0xc4>)
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	220f      	movs	r2, #15
 80045bc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	fa92 f2a2 	rbit	r2, r2
 80045c4:	60fa      	str	r2, [r7, #12]
  return result;
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	fab2 f282 	clz	r2, r2
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	40d3      	lsrs	r3, r2
 80045d0:	4a15      	ldr	r2, [pc, #84]	; (8004628 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045d2:	5cd3      	ldrb	r3, [r2, r3]
 80045d4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045e0:	4a0f      	ldr	r2, [pc, #60]	; (8004620 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	fb02 f303 	mul.w	r3, r2, r3
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
 80045f0:	e007      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045f2:	4a0b      	ldr	r2, [pc, #44]	; (8004620 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	fb02 f303 	mul.w	r3, r2, r3
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	623b      	str	r3, [r7, #32]
      break;
 8004606:	e002      	b.n	800460e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004608:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_GetSysClockFreq+0xc8>)
 800460a:	623b      	str	r3, [r7, #32]
      break;
 800460c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800460e:	6a3b      	ldr	r3, [r7, #32]
}
 8004610:	4618      	mov	r0, r3
 8004612:	372c      	adds	r7, #44	; 0x2c
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	40021000 	.word	0x40021000
 8004620:	007a1200 	.word	0x007a1200
 8004624:	08005c90 	.word	0x08005c90
 8004628:	08005ca0 	.word	0x08005ca0

0800462c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <HAL_RCC_GetHCLKFreq+0x14>)
 8004632:	681b      	ldr	r3, [r3, #0]
}
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	20000000 	.word	0x20000000

08004644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800464a:	f7ff ffef 	bl	800462c <HAL_RCC_GetHCLKFreq>
 800464e:	4601      	mov	r1, r0
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004658:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800465c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	fa92 f2a2 	rbit	r2, r2
 8004664:	603a      	str	r2, [r7, #0]
  return result;
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	fab2 f282 	clz	r2, r2
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	40d3      	lsrs	r3, r2
 8004670:	4a04      	ldr	r2, [pc, #16]	; (8004684 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004672:	5cd3      	ldrb	r3, [r2, r3]
 8004674:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000
 8004684:	08005c88 	.word	0x08005c88

08004688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800468e:	f7ff ffcd 	bl	800462c <HAL_RCC_GetHCLKFreq>
 8004692:	4601      	mov	r1, r0
 8004694:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800469c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80046a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	fa92 f2a2 	rbit	r2, r2
 80046a8:	603a      	str	r2, [r7, #0]
  return result;
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	fab2 f282 	clz	r2, r2
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	40d3      	lsrs	r3, r2
 80046b4:	4a04      	ldr	r2, [pc, #16]	; (80046c8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80046b6:	5cd3      	ldrb	r3, [r2, r3]
 80046b8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40021000 	.word	0x40021000
 80046c8:	08005c88 	.word	0x08005c88

080046cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b092      	sub	sp, #72	; 0x48
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80d7 	beq.w	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80046ea:	2300      	movs	r3, #0
 80046ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f0:	4b4e      	ldr	r3, [pc, #312]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10e      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fc:	4b4b      	ldr	r3, [pc, #300]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	4a4a      	ldr	r2, [pc, #296]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004706:	61d3      	str	r3, [r2, #28]
 8004708:	4b48      	ldr	r3, [pc, #288]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471a:	4b45      	ldr	r3, [pc, #276]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d118      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004726:	4b42      	ldr	r3, [pc, #264]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a41      	ldr	r2, [pc, #260]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800472c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004730:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004732:	f7fc fe23 	bl	800137c <HAL_GetTick>
 8004736:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004738:	e008      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473a:	f7fc fe1f 	bl	800137c <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b64      	cmp	r3, #100	; 0x64
 8004746:	d901      	bls.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e1d6      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474c:	4b38      	ldr	r3, [pc, #224]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004758:	4b34      	ldr	r3, [pc, #208]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004760:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8084 	beq.w	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004774:	429a      	cmp	r2, r3
 8004776:	d07c      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004778:	4b2c      	ldr	r3, [pc, #176]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004786:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	fa93 f3a3 	rbit	r3, r3
 800478e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004792:	fab3 f383 	clz	r3, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	4b26      	ldr	r3, [pc, #152]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	461a      	mov	r2, r3
 80047a2:	2301      	movs	r3, #1
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047b6:	fab3 f383 	clz	r3, r3
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	461a      	mov	r2, r3
 80047c6:	2300      	movs	r3, #0
 80047c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047ca:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d04b      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047da:	f7fc fdcf 	bl	800137c <HAL_GetTick>
 80047de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e0:	e00a      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e2:	f7fc fdcb 	bl	800137c <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e180      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80047f8:	2302      	movs	r3, #2
 80047fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fe:	fa93 f3a3 	rbit	r3, r3
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
 8004804:	2302      	movs	r3, #2
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	fa93 f3a3 	rbit	r3, r3
 800480e:	61fb      	str	r3, [r7, #28]
  return result;
 8004810:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004812:	fab3 f383 	clz	r3, r3
 8004816:	b2db      	uxtb	r3, r3
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f043 0302 	orr.w	r3, r3, #2
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d108      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004826:	4b01      	ldr	r3, [pc, #4]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	e00d      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800482c:	40021000 	.word	0x40021000
 8004830:	40007000 	.word	0x40007000
 8004834:	10908100 	.word	0x10908100
 8004838:	2302      	movs	r3, #2
 800483a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	fa93 f3a3 	rbit	r3, r3
 8004842:	617b      	str	r3, [r7, #20]
 8004844:	4ba0      	ldr	r3, [pc, #640]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	2202      	movs	r2, #2
 800484a:	613a      	str	r2, [r7, #16]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	fa92 f2a2 	rbit	r2, r2
 8004852:	60fa      	str	r2, [r7, #12]
  return result;
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	fab2 f282 	clz	r2, r2
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	f002 021f 	and.w	r2, r2, #31
 8004866:	2101      	movs	r1, #1
 8004868:	fa01 f202 	lsl.w	r2, r1, r2
 800486c:	4013      	ands	r3, r2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0b7      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004872:	4b95      	ldr	r3, [pc, #596]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4992      	ldr	r1, [pc, #584]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004880:	4313      	orrs	r3, r2
 8004882:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004884:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004888:	2b01      	cmp	r3, #1
 800488a:	d105      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488c:	4b8e      	ldr	r3, [pc, #568]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	4a8d      	ldr	r2, [pc, #564]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004896:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048a4:	4b88      	ldr	r3, [pc, #544]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	f023 0203 	bic.w	r2, r3, #3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4985      	ldr	r1, [pc, #532]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048c2:	4b81      	ldr	r3, [pc, #516]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	497e      	ldr	r1, [pc, #504]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048e0:	4b79      	ldr	r3, [pc, #484]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	4976      	ldr	r1, [pc, #472]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048fe:	4b72      	ldr	r3, [pc, #456]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f023 0210 	bic.w	r2, r3, #16
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	496f      	ldr	r1, [pc, #444]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800490c:	4313      	orrs	r3, r2
 800490e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800491c:	4b6a      	ldr	r3, [pc, #424]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004928:	4967      	ldr	r1, [pc, #412]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800492a:	4313      	orrs	r3, r2
 800492c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800493a:	4b63      	ldr	r3, [pc, #396]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	f023 0220 	bic.w	r2, r3, #32
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	4960      	ldr	r1, [pc, #384]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004948:	4313      	orrs	r3, r2
 800494a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004958:	4b5b      	ldr	r3, [pc, #364]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	4958      	ldr	r1, [pc, #352]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004966:	4313      	orrs	r3, r2
 8004968:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d008      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004976:	4b54      	ldr	r3, [pc, #336]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	4951      	ldr	r1, [pc, #324]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004994:	4b4c      	ldr	r3, [pc, #304]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	4949      	ldr	r1, [pc, #292]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049b2:	4b45      	ldr	r3, [pc, #276]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	4942      	ldr	r1, [pc, #264]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049d0:	4b3d      	ldr	r3, [pc, #244]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	493a      	ldr	r1, [pc, #232]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d008      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80049ee:	4b36      	ldr	r3, [pc, #216]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	4933      	ldr	r1, [pc, #204]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a0c:	4b2e      	ldr	r3, [pc, #184]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a18:	492b      	ldr	r1, [pc, #172]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004a2a:	4b27      	ldr	r3, [pc, #156]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	4924      	ldr	r1, [pc, #144]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004a48:	4b1f      	ldr	r3, [pc, #124]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	491c      	ldr	r1, [pc, #112]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004a66:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a72:	4915      	ldr	r1, [pc, #84]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a84:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a88:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a90:	490d      	ldr	r1, [pc, #52]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004aa2:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aae:	4906      	ldr	r1, [pc, #24]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00c      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004ac0:	4b01      	ldr	r3, [pc, #4]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	e002      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004ac6:	bf00      	nop
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad4:	490b      	ldr	r1, [pc, #44]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004ae6:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af2:	4904      	ldr	r1, [pc, #16]	; (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3748      	adds	r7, #72	; 0x48
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40021000 	.word	0x40021000

08004b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e040      	b.n	8004b9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fc fae6 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2224      	movs	r2, #36	; 0x24
 8004b34:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f8c0 	bl	8004ccc <UART_SetConfig>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e022      	b.n	8004b9c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 face 	bl	8005100 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 0201 	orr.w	r2, r2, #1
 8004b92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fb55 	bl	8005244 <UART_CheckIdleState>
 8004b9a:	4603      	mov	r3, r0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	; 0x28
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	f040 8081 	bne.w	8004cc0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <HAL_UART_Transmit+0x26>
 8004bc4:	88fb      	ldrh	r3, [r7, #6]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e079      	b.n	8004cc2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_UART_Transmit+0x38>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e072      	b.n	8004cc2 <HAL_UART_Transmit+0x11e>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2221      	movs	r2, #33	; 0x21
 8004bee:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004bf0:	f7fc fbc4 	bl	800137c <HAL_GetTick>
 8004bf4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	88fa      	ldrh	r2, [r7, #6]
 8004bfa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0e:	d108      	bne.n	8004c22 <HAL_UART_Transmit+0x7e>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	e003      	b.n	8004c2a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c2a:	e02d      	b.n	8004c88 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2200      	movs	r2, #0
 8004c34:	2180      	movs	r1, #128	; 0x80
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 fb49 	bl	80052ce <UART_WaitOnFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e03d      	b.n	8004cc2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	881a      	ldrh	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	3302      	adds	r3, #2
 8004c60:	61bb      	str	r3, [r7, #24]
 8004c62:	e008      	b.n	8004c76 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	b292      	uxth	r2, r2
 8004c6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	3301      	adds	r3, #1
 8004c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1cb      	bne.n	8004c2c <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	2140      	movs	r1, #64	; 0x40
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 fb15 	bl	80052ce <UART_WaitOnFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e009      	b.n	8004cc2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e000      	b.n	8004cc2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
  }
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4bac      	ldr	r3, [pc, #688]	; (8004fac <UART_SetConfig+0x2e0>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	6939      	ldr	r1, [r7, #16]
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a9a      	ldr	r2, [pc, #616]	; (8004fb0 <UART_SetConfig+0x2e4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d121      	bne.n	8004d90 <UART_SetConfig+0xc4>
 8004d4c:	4b99      	ldr	r3, [pc, #612]	; (8004fb4 <UART_SetConfig+0x2e8>)
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	f003 0303 	and.w	r3, r3, #3
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d817      	bhi.n	8004d88 <UART_SetConfig+0xbc>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <UART_SetConfig+0x94>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d71 	.word	0x08004d71
 8004d64:	08004d7d 	.word	0x08004d7d
 8004d68:	08004d83 	.word	0x08004d83
 8004d6c:	08004d77 	.word	0x08004d77
 8004d70:	2301      	movs	r3, #1
 8004d72:	77fb      	strb	r3, [r7, #31]
 8004d74:	e0b2      	b.n	8004edc <UART_SetConfig+0x210>
 8004d76:	2302      	movs	r3, #2
 8004d78:	77fb      	strb	r3, [r7, #31]
 8004d7a:	e0af      	b.n	8004edc <UART_SetConfig+0x210>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	77fb      	strb	r3, [r7, #31]
 8004d80:	e0ac      	b.n	8004edc <UART_SetConfig+0x210>
 8004d82:	2308      	movs	r3, #8
 8004d84:	77fb      	strb	r3, [r7, #31]
 8004d86:	e0a9      	b.n	8004edc <UART_SetConfig+0x210>
 8004d88:	2310      	movs	r3, #16
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	bf00      	nop
 8004d8e:	e0a5      	b.n	8004edc <UART_SetConfig+0x210>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a88      	ldr	r2, [pc, #544]	; (8004fb8 <UART_SetConfig+0x2ec>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d123      	bne.n	8004de2 <UART_SetConfig+0x116>
 8004d9a:	4b86      	ldr	r3, [pc, #536]	; (8004fb4 <UART_SetConfig+0x2e8>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da6:	d012      	beq.n	8004dce <UART_SetConfig+0x102>
 8004da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dac:	d802      	bhi.n	8004db4 <UART_SetConfig+0xe8>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <UART_SetConfig+0xf6>
 8004db2:	e012      	b.n	8004dda <UART_SetConfig+0x10e>
 8004db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004db8:	d00c      	beq.n	8004dd4 <UART_SetConfig+0x108>
 8004dba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dbe:	d003      	beq.n	8004dc8 <UART_SetConfig+0xfc>
 8004dc0:	e00b      	b.n	8004dda <UART_SetConfig+0x10e>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e089      	b.n	8004edc <UART_SetConfig+0x210>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	77fb      	strb	r3, [r7, #31]
 8004dcc:	e086      	b.n	8004edc <UART_SetConfig+0x210>
 8004dce:	2304      	movs	r3, #4
 8004dd0:	77fb      	strb	r3, [r7, #31]
 8004dd2:	e083      	b.n	8004edc <UART_SetConfig+0x210>
 8004dd4:	2308      	movs	r3, #8
 8004dd6:	77fb      	strb	r3, [r7, #31]
 8004dd8:	e080      	b.n	8004edc <UART_SetConfig+0x210>
 8004dda:	2310      	movs	r3, #16
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	bf00      	nop
 8004de0:	e07c      	b.n	8004edc <UART_SetConfig+0x210>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a75      	ldr	r2, [pc, #468]	; (8004fbc <UART_SetConfig+0x2f0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d123      	bne.n	8004e34 <UART_SetConfig+0x168>
 8004dec:	4b71      	ldr	r3, [pc, #452]	; (8004fb4 <UART_SetConfig+0x2e8>)
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004df4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004df8:	d012      	beq.n	8004e20 <UART_SetConfig+0x154>
 8004dfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dfe:	d802      	bhi.n	8004e06 <UART_SetConfig+0x13a>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <UART_SetConfig+0x148>
 8004e04:	e012      	b.n	8004e2c <UART_SetConfig+0x160>
 8004e06:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e0a:	d00c      	beq.n	8004e26 <UART_SetConfig+0x15a>
 8004e0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e10:	d003      	beq.n	8004e1a <UART_SetConfig+0x14e>
 8004e12:	e00b      	b.n	8004e2c <UART_SetConfig+0x160>
 8004e14:	2300      	movs	r3, #0
 8004e16:	77fb      	strb	r3, [r7, #31]
 8004e18:	e060      	b.n	8004edc <UART_SetConfig+0x210>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	77fb      	strb	r3, [r7, #31]
 8004e1e:	e05d      	b.n	8004edc <UART_SetConfig+0x210>
 8004e20:	2304      	movs	r3, #4
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e05a      	b.n	8004edc <UART_SetConfig+0x210>
 8004e26:	2308      	movs	r3, #8
 8004e28:	77fb      	strb	r3, [r7, #31]
 8004e2a:	e057      	b.n	8004edc <UART_SetConfig+0x210>
 8004e2c:	2310      	movs	r3, #16
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	bf00      	nop
 8004e32:	e053      	b.n	8004edc <UART_SetConfig+0x210>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a61      	ldr	r2, [pc, #388]	; (8004fc0 <UART_SetConfig+0x2f4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d123      	bne.n	8004e86 <UART_SetConfig+0x1ba>
 8004e3e:	4b5d      	ldr	r3, [pc, #372]	; (8004fb4 <UART_SetConfig+0x2e8>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4a:	d012      	beq.n	8004e72 <UART_SetConfig+0x1a6>
 8004e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e50:	d802      	bhi.n	8004e58 <UART_SetConfig+0x18c>
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <UART_SetConfig+0x19a>
 8004e56:	e012      	b.n	8004e7e <UART_SetConfig+0x1b2>
 8004e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e5c:	d00c      	beq.n	8004e78 <UART_SetConfig+0x1ac>
 8004e5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e62:	d003      	beq.n	8004e6c <UART_SetConfig+0x1a0>
 8004e64:	e00b      	b.n	8004e7e <UART_SetConfig+0x1b2>
 8004e66:	2300      	movs	r3, #0
 8004e68:	77fb      	strb	r3, [r7, #31]
 8004e6a:	e037      	b.n	8004edc <UART_SetConfig+0x210>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	77fb      	strb	r3, [r7, #31]
 8004e70:	e034      	b.n	8004edc <UART_SetConfig+0x210>
 8004e72:	2304      	movs	r3, #4
 8004e74:	77fb      	strb	r3, [r7, #31]
 8004e76:	e031      	b.n	8004edc <UART_SetConfig+0x210>
 8004e78:	2308      	movs	r3, #8
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e02e      	b.n	8004edc <UART_SetConfig+0x210>
 8004e7e:	2310      	movs	r3, #16
 8004e80:	77fb      	strb	r3, [r7, #31]
 8004e82:	bf00      	nop
 8004e84:	e02a      	b.n	8004edc <UART_SetConfig+0x210>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a4e      	ldr	r2, [pc, #312]	; (8004fc4 <UART_SetConfig+0x2f8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d123      	bne.n	8004ed8 <UART_SetConfig+0x20c>
 8004e90:	4b48      	ldr	r3, [pc, #288]	; (8004fb4 <UART_SetConfig+0x2e8>)
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e9c:	d012      	beq.n	8004ec4 <UART_SetConfig+0x1f8>
 8004e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea2:	d802      	bhi.n	8004eaa <UART_SetConfig+0x1de>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <UART_SetConfig+0x1ec>
 8004ea8:	e012      	b.n	8004ed0 <UART_SetConfig+0x204>
 8004eaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eae:	d00c      	beq.n	8004eca <UART_SetConfig+0x1fe>
 8004eb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eb4:	d003      	beq.n	8004ebe <UART_SetConfig+0x1f2>
 8004eb6:	e00b      	b.n	8004ed0 <UART_SetConfig+0x204>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	77fb      	strb	r3, [r7, #31]
 8004ebc:	e00e      	b.n	8004edc <UART_SetConfig+0x210>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	77fb      	strb	r3, [r7, #31]
 8004ec2:	e00b      	b.n	8004edc <UART_SetConfig+0x210>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e008      	b.n	8004edc <UART_SetConfig+0x210>
 8004eca:	2308      	movs	r3, #8
 8004ecc:	77fb      	strb	r3, [r7, #31]
 8004ece:	e005      	b.n	8004edc <UART_SetConfig+0x210>
 8004ed0:	2310      	movs	r3, #16
 8004ed2:	77fb      	strb	r3, [r7, #31]
 8004ed4:	bf00      	nop
 8004ed6:	e001      	b.n	8004edc <UART_SetConfig+0x210>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee4:	f040 8090 	bne.w	8005008 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004ee8:	7ffb      	ldrb	r3, [r7, #31]
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d86c      	bhi.n	8004fc8 <UART_SetConfig+0x2fc>
 8004eee:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <UART_SetConfig+0x228>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f39 	.word	0x08004f39
 8004efc:	08004f59 	.word	0x08004f59
 8004f00:	08004fc9 	.word	0x08004fc9
 8004f04:	08004f75 	.word	0x08004f75
 8004f08:	08004fc9 	.word	0x08004fc9
 8004f0c:	08004fc9 	.word	0x08004fc9
 8004f10:	08004fc9 	.word	0x08004fc9
 8004f14:	08004f95 	.word	0x08004f95
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f18:	f7ff fb94 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 8004f1c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	005a      	lsls	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	441a      	add	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	61bb      	str	r3, [r7, #24]
        break;
 8004f36:	e04a      	b.n	8004fce <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f38:	f7ff fba6 	bl	8004688 <HAL_RCC_GetPCLK2Freq>
 8004f3c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	005a      	lsls	r2, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	085b      	lsrs	r3, r3, #1
 8004f48:	441a      	add	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	61bb      	str	r3, [r7, #24]
        break;
 8004f56:	e03a      	b.n	8004fce <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004f62:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	6852      	ldr	r2, [r2, #4]
 8004f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	61bb      	str	r3, [r7, #24]
        break;
 8004f72:	e02c      	b.n	8004fce <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f74:	f7ff faf0 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 8004f78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	005a      	lsls	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	441a      	add	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	61bb      	str	r3, [r7, #24]
        break;
 8004f92:	e01c      	b.n	8004fce <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	085b      	lsrs	r3, r3, #1
 8004f9a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	61bb      	str	r3, [r7, #24]
        break;
 8004faa:	e010      	b.n	8004fce <UART_SetConfig+0x302>
 8004fac:	efff69f3 	.word	0xefff69f3
 8004fb0:	40013800 	.word	0x40013800
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40004400 	.word	0x40004400
 8004fbc:	40004800 	.word	0x40004800
 8004fc0:	40004c00 	.word	0x40004c00
 8004fc4:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	75fb      	strb	r3, [r7, #23]
        break;
 8004fcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b0f      	cmp	r3, #15
 8004fd2:	d916      	bls.n	8005002 <UART_SetConfig+0x336>
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fda:	d212      	bcs.n	8005002 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	f023 030f 	bic.w	r3, r3, #15
 8004fe4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	897b      	ldrh	r3, [r7, #10]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	897a      	ldrh	r2, [r7, #10]
 8004ffe:	60da      	str	r2, [r3, #12]
 8005000:	e072      	b.n	80050e8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	75fb      	strb	r3, [r7, #23]
 8005006:	e06f      	b.n	80050e8 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8005008:	7ffb      	ldrb	r3, [r7, #31]
 800500a:	2b08      	cmp	r3, #8
 800500c:	d85b      	bhi.n	80050c6 <UART_SetConfig+0x3fa>
 800500e:	a201      	add	r2, pc, #4	; (adr r2, 8005014 <UART_SetConfig+0x348>)
 8005010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005014:	08005039 	.word	0x08005039
 8005018:	08005057 	.word	0x08005057
 800501c:	08005075 	.word	0x08005075
 8005020:	080050c7 	.word	0x080050c7
 8005024:	08005091 	.word	0x08005091
 8005028:	080050c7 	.word	0x080050c7
 800502c:	080050c7 	.word	0x080050c7
 8005030:	080050c7 	.word	0x080050c7
 8005034:	080050af 	.word	0x080050af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005038:	f7ff fb04 	bl	8004644 <HAL_RCC_GetPCLK1Freq>
 800503c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	085a      	lsrs	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	441a      	add	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005050:	b29b      	uxth	r3, r3
 8005052:	61bb      	str	r3, [r7, #24]
        break;
 8005054:	e03a      	b.n	80050cc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005056:	f7ff fb17 	bl	8004688 <HAL_RCC_GetPCLK2Freq>
 800505a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	085a      	lsrs	r2, r3, #1
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	441a      	add	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	fbb2 f3f3 	udiv	r3, r2, r3
 800506e:	b29b      	uxth	r3, r3
 8005070:	61bb      	str	r3, [r7, #24]
        break;
 8005072:	e02b      	b.n	80050cc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	085b      	lsrs	r3, r3, #1
 800507a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800507e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6852      	ldr	r2, [r2, #4]
 8005086:	fbb3 f3f2 	udiv	r3, r3, r2
 800508a:	b29b      	uxth	r3, r3
 800508c:	61bb      	str	r3, [r7, #24]
        break;
 800508e:	e01d      	b.n	80050cc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005090:	f7ff fa62 	bl	8004558 <HAL_RCC_GetSysClockFreq>
 8005094:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	085a      	lsrs	r2, r3, #1
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	441a      	add	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	61bb      	str	r3, [r7, #24]
        break;
 80050ac:	e00e      	b.n	80050cc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	61bb      	str	r3, [r7, #24]
        break;
 80050c4:	e002      	b.n	80050cc <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	75fb      	strb	r3, [r7, #23]
        break;
 80050ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d908      	bls.n	80050e4 <UART_SetConfig+0x418>
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d8:	d204      	bcs.n	80050e4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	60da      	str	r2, [r3, #12]
 80050e2:	e001      	b.n	80050e8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3720      	adds	r7, #32
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop

08005100 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	f003 0304 	and.w	r3, r3, #4
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	f003 0310 	and.w	r3, r3, #16
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	430a      	orrs	r2, r1
 80051b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01a      	beq.n	8005216 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051fe:	d10a      	bne.n	8005216 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  }
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af02      	add	r7, sp, #8
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005252:	f7fc f893 	bl	800137c <HAL_GetTick>
 8005256:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b08      	cmp	r3, #8
 8005264:	d10e      	bne.n	8005284 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005266:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f82a 	bl	80052ce <UART_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e020      	b.n	80052c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b04      	cmp	r3, #4
 8005290:	d10e      	bne.n	80052b0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005292:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f814 	bl	80052ce <UART_WaitOnFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e00a      	b.n	80052c6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	603b      	str	r3, [r7, #0]
 80052da:	4613      	mov	r3, r2
 80052dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052de:	e05d      	b.n	800539c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e6:	d059      	beq.n	800539c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e8:	f7fc f848 	bl	800137c <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d302      	bcc.n	80052fe <UART_WaitOnFlagUntilTimeout+0x30>
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d11b      	bne.n	8005336 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800530c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e042      	b.n	80053bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0304 	and.w	r3, r3, #4
 8005340:	2b00      	cmp	r3, #0
 8005342:	d02b      	beq.n	800539c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800534e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005352:	d123      	bne.n	800539c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800535c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800536c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0201 	bic.w	r2, r2, #1
 800537c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2220      	movs	r2, #32
 8005388:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e00f      	b.n	80053bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	69da      	ldr	r2, [r3, #28]
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4013      	ands	r3, r2
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	bf0c      	ite	eq
 80053ac:	2301      	moveq	r3, #1
 80053ae:	2300      	movne	r3, #0
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	461a      	mov	r2, r3
 80053b4:	79fb      	ldrb	r3, [r7, #7]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d092      	beq.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <__errno>:
 80053c4:	4b01      	ldr	r3, [pc, #4]	; (80053cc <__errno+0x8>)
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	2000000c 	.word	0x2000000c

080053d0 <__libc_init_array>:
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	4e0d      	ldr	r6, [pc, #52]	; (8005408 <__libc_init_array+0x38>)
 80053d4:	4c0d      	ldr	r4, [pc, #52]	; (800540c <__libc_init_array+0x3c>)
 80053d6:	1ba4      	subs	r4, r4, r6
 80053d8:	10a4      	asrs	r4, r4, #2
 80053da:	2500      	movs	r5, #0
 80053dc:	42a5      	cmp	r5, r4
 80053de:	d109      	bne.n	80053f4 <__libc_init_array+0x24>
 80053e0:	4e0b      	ldr	r6, [pc, #44]	; (8005410 <__libc_init_array+0x40>)
 80053e2:	4c0c      	ldr	r4, [pc, #48]	; (8005414 <__libc_init_array+0x44>)
 80053e4:	f000 fc26 	bl	8005c34 <_init>
 80053e8:	1ba4      	subs	r4, r4, r6
 80053ea:	10a4      	asrs	r4, r4, #2
 80053ec:	2500      	movs	r5, #0
 80053ee:	42a5      	cmp	r5, r4
 80053f0:	d105      	bne.n	80053fe <__libc_init_array+0x2e>
 80053f2:	bd70      	pop	{r4, r5, r6, pc}
 80053f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053f8:	4798      	blx	r3
 80053fa:	3501      	adds	r5, #1
 80053fc:	e7ee      	b.n	80053dc <__libc_init_array+0xc>
 80053fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005402:	4798      	blx	r3
 8005404:	3501      	adds	r5, #1
 8005406:	e7f2      	b.n	80053ee <__libc_init_array+0x1e>
 8005408:	08005ce4 	.word	0x08005ce4
 800540c:	08005ce4 	.word	0x08005ce4
 8005410:	08005ce4 	.word	0x08005ce4
 8005414:	08005ce8 	.word	0x08005ce8

08005418 <memset>:
 8005418:	4402      	add	r2, r0
 800541a:	4603      	mov	r3, r0
 800541c:	4293      	cmp	r3, r2
 800541e:	d100      	bne.n	8005422 <memset+0xa>
 8005420:	4770      	bx	lr
 8005422:	f803 1b01 	strb.w	r1, [r3], #1
 8005426:	e7f9      	b.n	800541c <memset+0x4>

08005428 <siprintf>:
 8005428:	b40e      	push	{r1, r2, r3}
 800542a:	b500      	push	{lr}
 800542c:	b09c      	sub	sp, #112	; 0x70
 800542e:	ab1d      	add	r3, sp, #116	; 0x74
 8005430:	9002      	str	r0, [sp, #8]
 8005432:	9006      	str	r0, [sp, #24]
 8005434:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005438:	4809      	ldr	r0, [pc, #36]	; (8005460 <siprintf+0x38>)
 800543a:	9107      	str	r1, [sp, #28]
 800543c:	9104      	str	r1, [sp, #16]
 800543e:	4909      	ldr	r1, [pc, #36]	; (8005464 <siprintf+0x3c>)
 8005440:	f853 2b04 	ldr.w	r2, [r3], #4
 8005444:	9105      	str	r1, [sp, #20]
 8005446:	6800      	ldr	r0, [r0, #0]
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	a902      	add	r1, sp, #8
 800544c:	f000 f866 	bl	800551c <_svfiprintf_r>
 8005450:	9b02      	ldr	r3, [sp, #8]
 8005452:	2200      	movs	r2, #0
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	b01c      	add	sp, #112	; 0x70
 8005458:	f85d eb04 	ldr.w	lr, [sp], #4
 800545c:	b003      	add	sp, #12
 800545e:	4770      	bx	lr
 8005460:	2000000c 	.word	0x2000000c
 8005464:	ffff0208 	.word	0xffff0208

08005468 <__ssputs_r>:
 8005468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800546c:	688e      	ldr	r6, [r1, #8]
 800546e:	429e      	cmp	r6, r3
 8005470:	4682      	mov	sl, r0
 8005472:	460c      	mov	r4, r1
 8005474:	4690      	mov	r8, r2
 8005476:	4699      	mov	r9, r3
 8005478:	d837      	bhi.n	80054ea <__ssputs_r+0x82>
 800547a:	898a      	ldrh	r2, [r1, #12]
 800547c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005480:	d031      	beq.n	80054e6 <__ssputs_r+0x7e>
 8005482:	6825      	ldr	r5, [r4, #0]
 8005484:	6909      	ldr	r1, [r1, #16]
 8005486:	1a6f      	subs	r7, r5, r1
 8005488:	6965      	ldr	r5, [r4, #20]
 800548a:	2302      	movs	r3, #2
 800548c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005490:	fb95 f5f3 	sdiv	r5, r5, r3
 8005494:	f109 0301 	add.w	r3, r9, #1
 8005498:	443b      	add	r3, r7
 800549a:	429d      	cmp	r5, r3
 800549c:	bf38      	it	cc
 800549e:	461d      	movcc	r5, r3
 80054a0:	0553      	lsls	r3, r2, #21
 80054a2:	d530      	bpl.n	8005506 <__ssputs_r+0x9e>
 80054a4:	4629      	mov	r1, r5
 80054a6:	f000 fb2b 	bl	8005b00 <_malloc_r>
 80054aa:	4606      	mov	r6, r0
 80054ac:	b950      	cbnz	r0, 80054c4 <__ssputs_r+0x5c>
 80054ae:	230c      	movs	r3, #12
 80054b0:	f8ca 3000 	str.w	r3, [sl]
 80054b4:	89a3      	ldrh	r3, [r4, #12]
 80054b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ba:	81a3      	strh	r3, [r4, #12]
 80054bc:	f04f 30ff 	mov.w	r0, #4294967295
 80054c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c4:	463a      	mov	r2, r7
 80054c6:	6921      	ldr	r1, [r4, #16]
 80054c8:	f000 faa8 	bl	8005a1c <memcpy>
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d6:	81a3      	strh	r3, [r4, #12]
 80054d8:	6126      	str	r6, [r4, #16]
 80054da:	6165      	str	r5, [r4, #20]
 80054dc:	443e      	add	r6, r7
 80054de:	1bed      	subs	r5, r5, r7
 80054e0:	6026      	str	r6, [r4, #0]
 80054e2:	60a5      	str	r5, [r4, #8]
 80054e4:	464e      	mov	r6, r9
 80054e6:	454e      	cmp	r6, r9
 80054e8:	d900      	bls.n	80054ec <__ssputs_r+0x84>
 80054ea:	464e      	mov	r6, r9
 80054ec:	4632      	mov	r2, r6
 80054ee:	4641      	mov	r1, r8
 80054f0:	6820      	ldr	r0, [r4, #0]
 80054f2:	f000 fa9e 	bl	8005a32 <memmove>
 80054f6:	68a3      	ldr	r3, [r4, #8]
 80054f8:	1b9b      	subs	r3, r3, r6
 80054fa:	60a3      	str	r3, [r4, #8]
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	441e      	add	r6, r3
 8005500:	6026      	str	r6, [r4, #0]
 8005502:	2000      	movs	r0, #0
 8005504:	e7dc      	b.n	80054c0 <__ssputs_r+0x58>
 8005506:	462a      	mov	r2, r5
 8005508:	f000 fb54 	bl	8005bb4 <_realloc_r>
 800550c:	4606      	mov	r6, r0
 800550e:	2800      	cmp	r0, #0
 8005510:	d1e2      	bne.n	80054d8 <__ssputs_r+0x70>
 8005512:	6921      	ldr	r1, [r4, #16]
 8005514:	4650      	mov	r0, sl
 8005516:	f000 faa5 	bl	8005a64 <_free_r>
 800551a:	e7c8      	b.n	80054ae <__ssputs_r+0x46>

0800551c <_svfiprintf_r>:
 800551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005520:	461d      	mov	r5, r3
 8005522:	898b      	ldrh	r3, [r1, #12]
 8005524:	061f      	lsls	r7, r3, #24
 8005526:	b09d      	sub	sp, #116	; 0x74
 8005528:	4680      	mov	r8, r0
 800552a:	460c      	mov	r4, r1
 800552c:	4616      	mov	r6, r2
 800552e:	d50f      	bpl.n	8005550 <_svfiprintf_r+0x34>
 8005530:	690b      	ldr	r3, [r1, #16]
 8005532:	b96b      	cbnz	r3, 8005550 <_svfiprintf_r+0x34>
 8005534:	2140      	movs	r1, #64	; 0x40
 8005536:	f000 fae3 	bl	8005b00 <_malloc_r>
 800553a:	6020      	str	r0, [r4, #0]
 800553c:	6120      	str	r0, [r4, #16]
 800553e:	b928      	cbnz	r0, 800554c <_svfiprintf_r+0x30>
 8005540:	230c      	movs	r3, #12
 8005542:	f8c8 3000 	str.w	r3, [r8]
 8005546:	f04f 30ff 	mov.w	r0, #4294967295
 800554a:	e0c8      	b.n	80056de <_svfiprintf_r+0x1c2>
 800554c:	2340      	movs	r3, #64	; 0x40
 800554e:	6163      	str	r3, [r4, #20]
 8005550:	2300      	movs	r3, #0
 8005552:	9309      	str	r3, [sp, #36]	; 0x24
 8005554:	2320      	movs	r3, #32
 8005556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800555a:	2330      	movs	r3, #48	; 0x30
 800555c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005560:	9503      	str	r5, [sp, #12]
 8005562:	f04f 0b01 	mov.w	fp, #1
 8005566:	4637      	mov	r7, r6
 8005568:	463d      	mov	r5, r7
 800556a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800556e:	b10b      	cbz	r3, 8005574 <_svfiprintf_r+0x58>
 8005570:	2b25      	cmp	r3, #37	; 0x25
 8005572:	d13e      	bne.n	80055f2 <_svfiprintf_r+0xd6>
 8005574:	ebb7 0a06 	subs.w	sl, r7, r6
 8005578:	d00b      	beq.n	8005592 <_svfiprintf_r+0x76>
 800557a:	4653      	mov	r3, sl
 800557c:	4632      	mov	r2, r6
 800557e:	4621      	mov	r1, r4
 8005580:	4640      	mov	r0, r8
 8005582:	f7ff ff71 	bl	8005468 <__ssputs_r>
 8005586:	3001      	adds	r0, #1
 8005588:	f000 80a4 	beq.w	80056d4 <_svfiprintf_r+0x1b8>
 800558c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558e:	4453      	add	r3, sl
 8005590:	9309      	str	r3, [sp, #36]	; 0x24
 8005592:	783b      	ldrb	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 809d 	beq.w	80056d4 <_svfiprintf_r+0x1b8>
 800559a:	2300      	movs	r3, #0
 800559c:	f04f 32ff 	mov.w	r2, #4294967295
 80055a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	9307      	str	r3, [sp, #28]
 80055a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055ac:	931a      	str	r3, [sp, #104]	; 0x68
 80055ae:	462f      	mov	r7, r5
 80055b0:	2205      	movs	r2, #5
 80055b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80055b6:	4850      	ldr	r0, [pc, #320]	; (80056f8 <_svfiprintf_r+0x1dc>)
 80055b8:	f7fa fe1a 	bl	80001f0 <memchr>
 80055bc:	9b04      	ldr	r3, [sp, #16]
 80055be:	b9d0      	cbnz	r0, 80055f6 <_svfiprintf_r+0xda>
 80055c0:	06d9      	lsls	r1, r3, #27
 80055c2:	bf44      	itt	mi
 80055c4:	2220      	movmi	r2, #32
 80055c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055ca:	071a      	lsls	r2, r3, #28
 80055cc:	bf44      	itt	mi
 80055ce:	222b      	movmi	r2, #43	; 0x2b
 80055d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80055d4:	782a      	ldrb	r2, [r5, #0]
 80055d6:	2a2a      	cmp	r2, #42	; 0x2a
 80055d8:	d015      	beq.n	8005606 <_svfiprintf_r+0xea>
 80055da:	9a07      	ldr	r2, [sp, #28]
 80055dc:	462f      	mov	r7, r5
 80055de:	2000      	movs	r0, #0
 80055e0:	250a      	movs	r5, #10
 80055e2:	4639      	mov	r1, r7
 80055e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055e8:	3b30      	subs	r3, #48	; 0x30
 80055ea:	2b09      	cmp	r3, #9
 80055ec:	d94d      	bls.n	800568a <_svfiprintf_r+0x16e>
 80055ee:	b1b8      	cbz	r0, 8005620 <_svfiprintf_r+0x104>
 80055f0:	e00f      	b.n	8005612 <_svfiprintf_r+0xf6>
 80055f2:	462f      	mov	r7, r5
 80055f4:	e7b8      	b.n	8005568 <_svfiprintf_r+0x4c>
 80055f6:	4a40      	ldr	r2, [pc, #256]	; (80056f8 <_svfiprintf_r+0x1dc>)
 80055f8:	1a80      	subs	r0, r0, r2
 80055fa:	fa0b f000 	lsl.w	r0, fp, r0
 80055fe:	4318      	orrs	r0, r3
 8005600:	9004      	str	r0, [sp, #16]
 8005602:	463d      	mov	r5, r7
 8005604:	e7d3      	b.n	80055ae <_svfiprintf_r+0x92>
 8005606:	9a03      	ldr	r2, [sp, #12]
 8005608:	1d11      	adds	r1, r2, #4
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	9103      	str	r1, [sp, #12]
 800560e:	2a00      	cmp	r2, #0
 8005610:	db01      	blt.n	8005616 <_svfiprintf_r+0xfa>
 8005612:	9207      	str	r2, [sp, #28]
 8005614:	e004      	b.n	8005620 <_svfiprintf_r+0x104>
 8005616:	4252      	negs	r2, r2
 8005618:	f043 0302 	orr.w	r3, r3, #2
 800561c:	9207      	str	r2, [sp, #28]
 800561e:	9304      	str	r3, [sp, #16]
 8005620:	783b      	ldrb	r3, [r7, #0]
 8005622:	2b2e      	cmp	r3, #46	; 0x2e
 8005624:	d10c      	bne.n	8005640 <_svfiprintf_r+0x124>
 8005626:	787b      	ldrb	r3, [r7, #1]
 8005628:	2b2a      	cmp	r3, #42	; 0x2a
 800562a:	d133      	bne.n	8005694 <_svfiprintf_r+0x178>
 800562c:	9b03      	ldr	r3, [sp, #12]
 800562e:	1d1a      	adds	r2, r3, #4
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	9203      	str	r2, [sp, #12]
 8005634:	2b00      	cmp	r3, #0
 8005636:	bfb8      	it	lt
 8005638:	f04f 33ff 	movlt.w	r3, #4294967295
 800563c:	3702      	adds	r7, #2
 800563e:	9305      	str	r3, [sp, #20]
 8005640:	4d2e      	ldr	r5, [pc, #184]	; (80056fc <_svfiprintf_r+0x1e0>)
 8005642:	7839      	ldrb	r1, [r7, #0]
 8005644:	2203      	movs	r2, #3
 8005646:	4628      	mov	r0, r5
 8005648:	f7fa fdd2 	bl	80001f0 <memchr>
 800564c:	b138      	cbz	r0, 800565e <_svfiprintf_r+0x142>
 800564e:	2340      	movs	r3, #64	; 0x40
 8005650:	1b40      	subs	r0, r0, r5
 8005652:	fa03 f000 	lsl.w	r0, r3, r0
 8005656:	9b04      	ldr	r3, [sp, #16]
 8005658:	4303      	orrs	r3, r0
 800565a:	3701      	adds	r7, #1
 800565c:	9304      	str	r3, [sp, #16]
 800565e:	7839      	ldrb	r1, [r7, #0]
 8005660:	4827      	ldr	r0, [pc, #156]	; (8005700 <_svfiprintf_r+0x1e4>)
 8005662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005666:	2206      	movs	r2, #6
 8005668:	1c7e      	adds	r6, r7, #1
 800566a:	f7fa fdc1 	bl	80001f0 <memchr>
 800566e:	2800      	cmp	r0, #0
 8005670:	d038      	beq.n	80056e4 <_svfiprintf_r+0x1c8>
 8005672:	4b24      	ldr	r3, [pc, #144]	; (8005704 <_svfiprintf_r+0x1e8>)
 8005674:	bb13      	cbnz	r3, 80056bc <_svfiprintf_r+0x1a0>
 8005676:	9b03      	ldr	r3, [sp, #12]
 8005678:	3307      	adds	r3, #7
 800567a:	f023 0307 	bic.w	r3, r3, #7
 800567e:	3308      	adds	r3, #8
 8005680:	9303      	str	r3, [sp, #12]
 8005682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005684:	444b      	add	r3, r9
 8005686:	9309      	str	r3, [sp, #36]	; 0x24
 8005688:	e76d      	b.n	8005566 <_svfiprintf_r+0x4a>
 800568a:	fb05 3202 	mla	r2, r5, r2, r3
 800568e:	2001      	movs	r0, #1
 8005690:	460f      	mov	r7, r1
 8005692:	e7a6      	b.n	80055e2 <_svfiprintf_r+0xc6>
 8005694:	2300      	movs	r3, #0
 8005696:	3701      	adds	r7, #1
 8005698:	9305      	str	r3, [sp, #20]
 800569a:	4619      	mov	r1, r3
 800569c:	250a      	movs	r5, #10
 800569e:	4638      	mov	r0, r7
 80056a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056a4:	3a30      	subs	r2, #48	; 0x30
 80056a6:	2a09      	cmp	r2, #9
 80056a8:	d903      	bls.n	80056b2 <_svfiprintf_r+0x196>
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0c8      	beq.n	8005640 <_svfiprintf_r+0x124>
 80056ae:	9105      	str	r1, [sp, #20]
 80056b0:	e7c6      	b.n	8005640 <_svfiprintf_r+0x124>
 80056b2:	fb05 2101 	mla	r1, r5, r1, r2
 80056b6:	2301      	movs	r3, #1
 80056b8:	4607      	mov	r7, r0
 80056ba:	e7f0      	b.n	800569e <_svfiprintf_r+0x182>
 80056bc:	ab03      	add	r3, sp, #12
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	4622      	mov	r2, r4
 80056c2:	4b11      	ldr	r3, [pc, #68]	; (8005708 <_svfiprintf_r+0x1ec>)
 80056c4:	a904      	add	r1, sp, #16
 80056c6:	4640      	mov	r0, r8
 80056c8:	f3af 8000 	nop.w
 80056cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80056d0:	4681      	mov	r9, r0
 80056d2:	d1d6      	bne.n	8005682 <_svfiprintf_r+0x166>
 80056d4:	89a3      	ldrh	r3, [r4, #12]
 80056d6:	065b      	lsls	r3, r3, #25
 80056d8:	f53f af35 	bmi.w	8005546 <_svfiprintf_r+0x2a>
 80056dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056de:	b01d      	add	sp, #116	; 0x74
 80056e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e4:	ab03      	add	r3, sp, #12
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	4622      	mov	r2, r4
 80056ea:	4b07      	ldr	r3, [pc, #28]	; (8005708 <_svfiprintf_r+0x1ec>)
 80056ec:	a904      	add	r1, sp, #16
 80056ee:	4640      	mov	r0, r8
 80056f0:	f000 f882 	bl	80057f8 <_printf_i>
 80056f4:	e7ea      	b.n	80056cc <_svfiprintf_r+0x1b0>
 80056f6:	bf00      	nop
 80056f8:	08005cb0 	.word	0x08005cb0
 80056fc:	08005cb6 	.word	0x08005cb6
 8005700:	08005cba 	.word	0x08005cba
 8005704:	00000000 	.word	0x00000000
 8005708:	08005469 	.word	0x08005469

0800570c <_printf_common>:
 800570c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	4691      	mov	r9, r2
 8005712:	461f      	mov	r7, r3
 8005714:	688a      	ldr	r2, [r1, #8]
 8005716:	690b      	ldr	r3, [r1, #16]
 8005718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800571c:	4293      	cmp	r3, r2
 800571e:	bfb8      	it	lt
 8005720:	4613      	movlt	r3, r2
 8005722:	f8c9 3000 	str.w	r3, [r9]
 8005726:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800572a:	4606      	mov	r6, r0
 800572c:	460c      	mov	r4, r1
 800572e:	b112      	cbz	r2, 8005736 <_printf_common+0x2a>
 8005730:	3301      	adds	r3, #1
 8005732:	f8c9 3000 	str.w	r3, [r9]
 8005736:	6823      	ldr	r3, [r4, #0]
 8005738:	0699      	lsls	r1, r3, #26
 800573a:	bf42      	ittt	mi
 800573c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005740:	3302      	addmi	r3, #2
 8005742:	f8c9 3000 	strmi.w	r3, [r9]
 8005746:	6825      	ldr	r5, [r4, #0]
 8005748:	f015 0506 	ands.w	r5, r5, #6
 800574c:	d107      	bne.n	800575e <_printf_common+0x52>
 800574e:	f104 0a19 	add.w	sl, r4, #25
 8005752:	68e3      	ldr	r3, [r4, #12]
 8005754:	f8d9 2000 	ldr.w	r2, [r9]
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	42ab      	cmp	r3, r5
 800575c:	dc28      	bgt.n	80057b0 <_printf_common+0xa4>
 800575e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005762:	6822      	ldr	r2, [r4, #0]
 8005764:	3300      	adds	r3, #0
 8005766:	bf18      	it	ne
 8005768:	2301      	movne	r3, #1
 800576a:	0692      	lsls	r2, r2, #26
 800576c:	d42d      	bmi.n	80057ca <_printf_common+0xbe>
 800576e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005772:	4639      	mov	r1, r7
 8005774:	4630      	mov	r0, r6
 8005776:	47c0      	blx	r8
 8005778:	3001      	adds	r0, #1
 800577a:	d020      	beq.n	80057be <_printf_common+0xb2>
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	68e5      	ldr	r5, [r4, #12]
 8005780:	f8d9 2000 	ldr.w	r2, [r9]
 8005784:	f003 0306 	and.w	r3, r3, #6
 8005788:	2b04      	cmp	r3, #4
 800578a:	bf08      	it	eq
 800578c:	1aad      	subeq	r5, r5, r2
 800578e:	68a3      	ldr	r3, [r4, #8]
 8005790:	6922      	ldr	r2, [r4, #16]
 8005792:	bf0c      	ite	eq
 8005794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005798:	2500      	movne	r5, #0
 800579a:	4293      	cmp	r3, r2
 800579c:	bfc4      	itt	gt
 800579e:	1a9b      	subgt	r3, r3, r2
 80057a0:	18ed      	addgt	r5, r5, r3
 80057a2:	f04f 0900 	mov.w	r9, #0
 80057a6:	341a      	adds	r4, #26
 80057a8:	454d      	cmp	r5, r9
 80057aa:	d11a      	bne.n	80057e2 <_printf_common+0xd6>
 80057ac:	2000      	movs	r0, #0
 80057ae:	e008      	b.n	80057c2 <_printf_common+0xb6>
 80057b0:	2301      	movs	r3, #1
 80057b2:	4652      	mov	r2, sl
 80057b4:	4639      	mov	r1, r7
 80057b6:	4630      	mov	r0, r6
 80057b8:	47c0      	blx	r8
 80057ba:	3001      	adds	r0, #1
 80057bc:	d103      	bne.n	80057c6 <_printf_common+0xba>
 80057be:	f04f 30ff 	mov.w	r0, #4294967295
 80057c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c6:	3501      	adds	r5, #1
 80057c8:	e7c3      	b.n	8005752 <_printf_common+0x46>
 80057ca:	18e1      	adds	r1, r4, r3
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	2030      	movs	r0, #48	; 0x30
 80057d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057d4:	4422      	add	r2, r4
 80057d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057de:	3302      	adds	r3, #2
 80057e0:	e7c5      	b.n	800576e <_printf_common+0x62>
 80057e2:	2301      	movs	r3, #1
 80057e4:	4622      	mov	r2, r4
 80057e6:	4639      	mov	r1, r7
 80057e8:	4630      	mov	r0, r6
 80057ea:	47c0      	blx	r8
 80057ec:	3001      	adds	r0, #1
 80057ee:	d0e6      	beq.n	80057be <_printf_common+0xb2>
 80057f0:	f109 0901 	add.w	r9, r9, #1
 80057f4:	e7d8      	b.n	80057a8 <_printf_common+0x9c>
	...

080057f8 <_printf_i>:
 80057f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005800:	460c      	mov	r4, r1
 8005802:	7e09      	ldrb	r1, [r1, #24]
 8005804:	b085      	sub	sp, #20
 8005806:	296e      	cmp	r1, #110	; 0x6e
 8005808:	4617      	mov	r7, r2
 800580a:	4606      	mov	r6, r0
 800580c:	4698      	mov	r8, r3
 800580e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005810:	f000 80b3 	beq.w	800597a <_printf_i+0x182>
 8005814:	d822      	bhi.n	800585c <_printf_i+0x64>
 8005816:	2963      	cmp	r1, #99	; 0x63
 8005818:	d036      	beq.n	8005888 <_printf_i+0x90>
 800581a:	d80a      	bhi.n	8005832 <_printf_i+0x3a>
 800581c:	2900      	cmp	r1, #0
 800581e:	f000 80b9 	beq.w	8005994 <_printf_i+0x19c>
 8005822:	2958      	cmp	r1, #88	; 0x58
 8005824:	f000 8083 	beq.w	800592e <_printf_i+0x136>
 8005828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800582c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005830:	e032      	b.n	8005898 <_printf_i+0xa0>
 8005832:	2964      	cmp	r1, #100	; 0x64
 8005834:	d001      	beq.n	800583a <_printf_i+0x42>
 8005836:	2969      	cmp	r1, #105	; 0x69
 8005838:	d1f6      	bne.n	8005828 <_printf_i+0x30>
 800583a:	6820      	ldr	r0, [r4, #0]
 800583c:	6813      	ldr	r3, [r2, #0]
 800583e:	0605      	lsls	r5, r0, #24
 8005840:	f103 0104 	add.w	r1, r3, #4
 8005844:	d52a      	bpl.n	800589c <_printf_i+0xa4>
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6011      	str	r1, [r2, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	da03      	bge.n	8005856 <_printf_i+0x5e>
 800584e:	222d      	movs	r2, #45	; 0x2d
 8005850:	425b      	negs	r3, r3
 8005852:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005856:	486f      	ldr	r0, [pc, #444]	; (8005a14 <_printf_i+0x21c>)
 8005858:	220a      	movs	r2, #10
 800585a:	e039      	b.n	80058d0 <_printf_i+0xd8>
 800585c:	2973      	cmp	r1, #115	; 0x73
 800585e:	f000 809d 	beq.w	800599c <_printf_i+0x1a4>
 8005862:	d808      	bhi.n	8005876 <_printf_i+0x7e>
 8005864:	296f      	cmp	r1, #111	; 0x6f
 8005866:	d020      	beq.n	80058aa <_printf_i+0xb2>
 8005868:	2970      	cmp	r1, #112	; 0x70
 800586a:	d1dd      	bne.n	8005828 <_printf_i+0x30>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	f043 0320 	orr.w	r3, r3, #32
 8005872:	6023      	str	r3, [r4, #0]
 8005874:	e003      	b.n	800587e <_printf_i+0x86>
 8005876:	2975      	cmp	r1, #117	; 0x75
 8005878:	d017      	beq.n	80058aa <_printf_i+0xb2>
 800587a:	2978      	cmp	r1, #120	; 0x78
 800587c:	d1d4      	bne.n	8005828 <_printf_i+0x30>
 800587e:	2378      	movs	r3, #120	; 0x78
 8005880:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005884:	4864      	ldr	r0, [pc, #400]	; (8005a18 <_printf_i+0x220>)
 8005886:	e055      	b.n	8005934 <_printf_i+0x13c>
 8005888:	6813      	ldr	r3, [r2, #0]
 800588a:	1d19      	adds	r1, r3, #4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6011      	str	r1, [r2, #0]
 8005890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005898:	2301      	movs	r3, #1
 800589a:	e08c      	b.n	80059b6 <_printf_i+0x1be>
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6011      	str	r1, [r2, #0]
 80058a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058a4:	bf18      	it	ne
 80058a6:	b21b      	sxthne	r3, r3
 80058a8:	e7cf      	b.n	800584a <_printf_i+0x52>
 80058aa:	6813      	ldr	r3, [r2, #0]
 80058ac:	6825      	ldr	r5, [r4, #0]
 80058ae:	1d18      	adds	r0, r3, #4
 80058b0:	6010      	str	r0, [r2, #0]
 80058b2:	0628      	lsls	r0, r5, #24
 80058b4:	d501      	bpl.n	80058ba <_printf_i+0xc2>
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	e002      	b.n	80058c0 <_printf_i+0xc8>
 80058ba:	0668      	lsls	r0, r5, #25
 80058bc:	d5fb      	bpl.n	80058b6 <_printf_i+0xbe>
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	4854      	ldr	r0, [pc, #336]	; (8005a14 <_printf_i+0x21c>)
 80058c2:	296f      	cmp	r1, #111	; 0x6f
 80058c4:	bf14      	ite	ne
 80058c6:	220a      	movne	r2, #10
 80058c8:	2208      	moveq	r2, #8
 80058ca:	2100      	movs	r1, #0
 80058cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058d0:	6865      	ldr	r5, [r4, #4]
 80058d2:	60a5      	str	r5, [r4, #8]
 80058d4:	2d00      	cmp	r5, #0
 80058d6:	f2c0 8095 	blt.w	8005a04 <_printf_i+0x20c>
 80058da:	6821      	ldr	r1, [r4, #0]
 80058dc:	f021 0104 	bic.w	r1, r1, #4
 80058e0:	6021      	str	r1, [r4, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d13d      	bne.n	8005962 <_printf_i+0x16a>
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	f040 808e 	bne.w	8005a08 <_printf_i+0x210>
 80058ec:	4665      	mov	r5, ip
 80058ee:	2a08      	cmp	r2, #8
 80058f0:	d10b      	bne.n	800590a <_printf_i+0x112>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	07db      	lsls	r3, r3, #31
 80058f6:	d508      	bpl.n	800590a <_printf_i+0x112>
 80058f8:	6923      	ldr	r3, [r4, #16]
 80058fa:	6862      	ldr	r2, [r4, #4]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	bfde      	ittt	le
 8005900:	2330      	movle	r3, #48	; 0x30
 8005902:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005906:	f105 35ff 	addle.w	r5, r5, #4294967295
 800590a:	ebac 0305 	sub.w	r3, ip, r5
 800590e:	6123      	str	r3, [r4, #16]
 8005910:	f8cd 8000 	str.w	r8, [sp]
 8005914:	463b      	mov	r3, r7
 8005916:	aa03      	add	r2, sp, #12
 8005918:	4621      	mov	r1, r4
 800591a:	4630      	mov	r0, r6
 800591c:	f7ff fef6 	bl	800570c <_printf_common>
 8005920:	3001      	adds	r0, #1
 8005922:	d14d      	bne.n	80059c0 <_printf_i+0x1c8>
 8005924:	f04f 30ff 	mov.w	r0, #4294967295
 8005928:	b005      	add	sp, #20
 800592a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800592e:	4839      	ldr	r0, [pc, #228]	; (8005a14 <_printf_i+0x21c>)
 8005930:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005934:	6813      	ldr	r3, [r2, #0]
 8005936:	6821      	ldr	r1, [r4, #0]
 8005938:	1d1d      	adds	r5, r3, #4
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6015      	str	r5, [r2, #0]
 800593e:	060a      	lsls	r2, r1, #24
 8005940:	d50b      	bpl.n	800595a <_printf_i+0x162>
 8005942:	07ca      	lsls	r2, r1, #31
 8005944:	bf44      	itt	mi
 8005946:	f041 0120 	orrmi.w	r1, r1, #32
 800594a:	6021      	strmi	r1, [r4, #0]
 800594c:	b91b      	cbnz	r3, 8005956 <_printf_i+0x15e>
 800594e:	6822      	ldr	r2, [r4, #0]
 8005950:	f022 0220 	bic.w	r2, r2, #32
 8005954:	6022      	str	r2, [r4, #0]
 8005956:	2210      	movs	r2, #16
 8005958:	e7b7      	b.n	80058ca <_printf_i+0xd2>
 800595a:	064d      	lsls	r5, r1, #25
 800595c:	bf48      	it	mi
 800595e:	b29b      	uxthmi	r3, r3
 8005960:	e7ef      	b.n	8005942 <_printf_i+0x14a>
 8005962:	4665      	mov	r5, ip
 8005964:	fbb3 f1f2 	udiv	r1, r3, r2
 8005968:	fb02 3311 	mls	r3, r2, r1, r3
 800596c:	5cc3      	ldrb	r3, [r0, r3]
 800596e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005972:	460b      	mov	r3, r1
 8005974:	2900      	cmp	r1, #0
 8005976:	d1f5      	bne.n	8005964 <_printf_i+0x16c>
 8005978:	e7b9      	b.n	80058ee <_printf_i+0xf6>
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	6825      	ldr	r5, [r4, #0]
 800597e:	6961      	ldr	r1, [r4, #20]
 8005980:	1d18      	adds	r0, r3, #4
 8005982:	6010      	str	r0, [r2, #0]
 8005984:	0628      	lsls	r0, r5, #24
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	d501      	bpl.n	800598e <_printf_i+0x196>
 800598a:	6019      	str	r1, [r3, #0]
 800598c:	e002      	b.n	8005994 <_printf_i+0x19c>
 800598e:	066a      	lsls	r2, r5, #25
 8005990:	d5fb      	bpl.n	800598a <_printf_i+0x192>
 8005992:	8019      	strh	r1, [r3, #0]
 8005994:	2300      	movs	r3, #0
 8005996:	6123      	str	r3, [r4, #16]
 8005998:	4665      	mov	r5, ip
 800599a:	e7b9      	b.n	8005910 <_printf_i+0x118>
 800599c:	6813      	ldr	r3, [r2, #0]
 800599e:	1d19      	adds	r1, r3, #4
 80059a0:	6011      	str	r1, [r2, #0]
 80059a2:	681d      	ldr	r5, [r3, #0]
 80059a4:	6862      	ldr	r2, [r4, #4]
 80059a6:	2100      	movs	r1, #0
 80059a8:	4628      	mov	r0, r5
 80059aa:	f7fa fc21 	bl	80001f0 <memchr>
 80059ae:	b108      	cbz	r0, 80059b4 <_printf_i+0x1bc>
 80059b0:	1b40      	subs	r0, r0, r5
 80059b2:	6060      	str	r0, [r4, #4]
 80059b4:	6863      	ldr	r3, [r4, #4]
 80059b6:	6123      	str	r3, [r4, #16]
 80059b8:	2300      	movs	r3, #0
 80059ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059be:	e7a7      	b.n	8005910 <_printf_i+0x118>
 80059c0:	6923      	ldr	r3, [r4, #16]
 80059c2:	462a      	mov	r2, r5
 80059c4:	4639      	mov	r1, r7
 80059c6:	4630      	mov	r0, r6
 80059c8:	47c0      	blx	r8
 80059ca:	3001      	adds	r0, #1
 80059cc:	d0aa      	beq.n	8005924 <_printf_i+0x12c>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	079b      	lsls	r3, r3, #30
 80059d2:	d413      	bmi.n	80059fc <_printf_i+0x204>
 80059d4:	68e0      	ldr	r0, [r4, #12]
 80059d6:	9b03      	ldr	r3, [sp, #12]
 80059d8:	4298      	cmp	r0, r3
 80059da:	bfb8      	it	lt
 80059dc:	4618      	movlt	r0, r3
 80059de:	e7a3      	b.n	8005928 <_printf_i+0x130>
 80059e0:	2301      	movs	r3, #1
 80059e2:	464a      	mov	r2, r9
 80059e4:	4639      	mov	r1, r7
 80059e6:	4630      	mov	r0, r6
 80059e8:	47c0      	blx	r8
 80059ea:	3001      	adds	r0, #1
 80059ec:	d09a      	beq.n	8005924 <_printf_i+0x12c>
 80059ee:	3501      	adds	r5, #1
 80059f0:	68e3      	ldr	r3, [r4, #12]
 80059f2:	9a03      	ldr	r2, [sp, #12]
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	42ab      	cmp	r3, r5
 80059f8:	dcf2      	bgt.n	80059e0 <_printf_i+0x1e8>
 80059fa:	e7eb      	b.n	80059d4 <_printf_i+0x1dc>
 80059fc:	2500      	movs	r5, #0
 80059fe:	f104 0919 	add.w	r9, r4, #25
 8005a02:	e7f5      	b.n	80059f0 <_printf_i+0x1f8>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1ac      	bne.n	8005962 <_printf_i+0x16a>
 8005a08:	7803      	ldrb	r3, [r0, #0]
 8005a0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a12:	e76c      	b.n	80058ee <_printf_i+0xf6>
 8005a14:	08005cc1 	.word	0x08005cc1
 8005a18:	08005cd2 	.word	0x08005cd2

08005a1c <memcpy>:
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	1e43      	subs	r3, r0, #1
 8005a20:	440a      	add	r2, r1
 8005a22:	4291      	cmp	r1, r2
 8005a24:	d100      	bne.n	8005a28 <memcpy+0xc>
 8005a26:	bd10      	pop	{r4, pc}
 8005a28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a30:	e7f7      	b.n	8005a22 <memcpy+0x6>

08005a32 <memmove>:
 8005a32:	4288      	cmp	r0, r1
 8005a34:	b510      	push	{r4, lr}
 8005a36:	eb01 0302 	add.w	r3, r1, r2
 8005a3a:	d807      	bhi.n	8005a4c <memmove+0x1a>
 8005a3c:	1e42      	subs	r2, r0, #1
 8005a3e:	4299      	cmp	r1, r3
 8005a40:	d00a      	beq.n	8005a58 <memmove+0x26>
 8005a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a46:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005a4a:	e7f8      	b.n	8005a3e <memmove+0xc>
 8005a4c:	4283      	cmp	r3, r0
 8005a4e:	d9f5      	bls.n	8005a3c <memmove+0xa>
 8005a50:	1881      	adds	r1, r0, r2
 8005a52:	1ad2      	subs	r2, r2, r3
 8005a54:	42d3      	cmn	r3, r2
 8005a56:	d100      	bne.n	8005a5a <memmove+0x28>
 8005a58:	bd10      	pop	{r4, pc}
 8005a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a5e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005a62:	e7f7      	b.n	8005a54 <memmove+0x22>

08005a64 <_free_r>:
 8005a64:	b538      	push	{r3, r4, r5, lr}
 8005a66:	4605      	mov	r5, r0
 8005a68:	2900      	cmp	r1, #0
 8005a6a:	d045      	beq.n	8005af8 <_free_r+0x94>
 8005a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a70:	1f0c      	subs	r4, r1, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	bfb8      	it	lt
 8005a76:	18e4      	addlt	r4, r4, r3
 8005a78:	f000 f8d2 	bl	8005c20 <__malloc_lock>
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <_free_r+0x98>)
 8005a7e:	6813      	ldr	r3, [r2, #0]
 8005a80:	4610      	mov	r0, r2
 8005a82:	b933      	cbnz	r3, 8005a92 <_free_r+0x2e>
 8005a84:	6063      	str	r3, [r4, #4]
 8005a86:	6014      	str	r4, [r2, #0]
 8005a88:	4628      	mov	r0, r5
 8005a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a8e:	f000 b8c8 	b.w	8005c22 <__malloc_unlock>
 8005a92:	42a3      	cmp	r3, r4
 8005a94:	d90c      	bls.n	8005ab0 <_free_r+0x4c>
 8005a96:	6821      	ldr	r1, [r4, #0]
 8005a98:	1862      	adds	r2, r4, r1
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	bf04      	itt	eq
 8005a9e:	681a      	ldreq	r2, [r3, #0]
 8005aa0:	685b      	ldreq	r3, [r3, #4]
 8005aa2:	6063      	str	r3, [r4, #4]
 8005aa4:	bf04      	itt	eq
 8005aa6:	1852      	addeq	r2, r2, r1
 8005aa8:	6022      	streq	r2, [r4, #0]
 8005aaa:	6004      	str	r4, [r0, #0]
 8005aac:	e7ec      	b.n	8005a88 <_free_r+0x24>
 8005aae:	4613      	mov	r3, r2
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	b10a      	cbz	r2, 8005ab8 <_free_r+0x54>
 8005ab4:	42a2      	cmp	r2, r4
 8005ab6:	d9fa      	bls.n	8005aae <_free_r+0x4a>
 8005ab8:	6819      	ldr	r1, [r3, #0]
 8005aba:	1858      	adds	r0, r3, r1
 8005abc:	42a0      	cmp	r0, r4
 8005abe:	d10b      	bne.n	8005ad8 <_free_r+0x74>
 8005ac0:	6820      	ldr	r0, [r4, #0]
 8005ac2:	4401      	add	r1, r0
 8005ac4:	1858      	adds	r0, r3, r1
 8005ac6:	4282      	cmp	r2, r0
 8005ac8:	6019      	str	r1, [r3, #0]
 8005aca:	d1dd      	bne.n	8005a88 <_free_r+0x24>
 8005acc:	6810      	ldr	r0, [r2, #0]
 8005ace:	6852      	ldr	r2, [r2, #4]
 8005ad0:	605a      	str	r2, [r3, #4]
 8005ad2:	4401      	add	r1, r0
 8005ad4:	6019      	str	r1, [r3, #0]
 8005ad6:	e7d7      	b.n	8005a88 <_free_r+0x24>
 8005ad8:	d902      	bls.n	8005ae0 <_free_r+0x7c>
 8005ada:	230c      	movs	r3, #12
 8005adc:	602b      	str	r3, [r5, #0]
 8005ade:	e7d3      	b.n	8005a88 <_free_r+0x24>
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	1821      	adds	r1, r4, r0
 8005ae4:	428a      	cmp	r2, r1
 8005ae6:	bf04      	itt	eq
 8005ae8:	6811      	ldreq	r1, [r2, #0]
 8005aea:	6852      	ldreq	r2, [r2, #4]
 8005aec:	6062      	str	r2, [r4, #4]
 8005aee:	bf04      	itt	eq
 8005af0:	1809      	addeq	r1, r1, r0
 8005af2:	6021      	streq	r1, [r4, #0]
 8005af4:	605c      	str	r4, [r3, #4]
 8005af6:	e7c7      	b.n	8005a88 <_free_r+0x24>
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
 8005afa:	bf00      	nop
 8005afc:	20000090 	.word	0x20000090

08005b00 <_malloc_r>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	1ccd      	adds	r5, r1, #3
 8005b04:	f025 0503 	bic.w	r5, r5, #3
 8005b08:	3508      	adds	r5, #8
 8005b0a:	2d0c      	cmp	r5, #12
 8005b0c:	bf38      	it	cc
 8005b0e:	250c      	movcc	r5, #12
 8005b10:	2d00      	cmp	r5, #0
 8005b12:	4606      	mov	r6, r0
 8005b14:	db01      	blt.n	8005b1a <_malloc_r+0x1a>
 8005b16:	42a9      	cmp	r1, r5
 8005b18:	d903      	bls.n	8005b22 <_malloc_r+0x22>
 8005b1a:	230c      	movs	r3, #12
 8005b1c:	6033      	str	r3, [r6, #0]
 8005b1e:	2000      	movs	r0, #0
 8005b20:	bd70      	pop	{r4, r5, r6, pc}
 8005b22:	f000 f87d 	bl	8005c20 <__malloc_lock>
 8005b26:	4a21      	ldr	r2, [pc, #132]	; (8005bac <_malloc_r+0xac>)
 8005b28:	6814      	ldr	r4, [r2, #0]
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	b991      	cbnz	r1, 8005b54 <_malloc_r+0x54>
 8005b2e:	4c20      	ldr	r4, [pc, #128]	; (8005bb0 <_malloc_r+0xb0>)
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	b91b      	cbnz	r3, 8005b3c <_malloc_r+0x3c>
 8005b34:	4630      	mov	r0, r6
 8005b36:	f000 f863 	bl	8005c00 <_sbrk_r>
 8005b3a:	6020      	str	r0, [r4, #0]
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f000 f85e 	bl	8005c00 <_sbrk_r>
 8005b44:	1c43      	adds	r3, r0, #1
 8005b46:	d124      	bne.n	8005b92 <_malloc_r+0x92>
 8005b48:	230c      	movs	r3, #12
 8005b4a:	6033      	str	r3, [r6, #0]
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	f000 f868 	bl	8005c22 <__malloc_unlock>
 8005b52:	e7e4      	b.n	8005b1e <_malloc_r+0x1e>
 8005b54:	680b      	ldr	r3, [r1, #0]
 8005b56:	1b5b      	subs	r3, r3, r5
 8005b58:	d418      	bmi.n	8005b8c <_malloc_r+0x8c>
 8005b5a:	2b0b      	cmp	r3, #11
 8005b5c:	d90f      	bls.n	8005b7e <_malloc_r+0x7e>
 8005b5e:	600b      	str	r3, [r1, #0]
 8005b60:	50cd      	str	r5, [r1, r3]
 8005b62:	18cc      	adds	r4, r1, r3
 8005b64:	4630      	mov	r0, r6
 8005b66:	f000 f85c 	bl	8005c22 <__malloc_unlock>
 8005b6a:	f104 000b 	add.w	r0, r4, #11
 8005b6e:	1d23      	adds	r3, r4, #4
 8005b70:	f020 0007 	bic.w	r0, r0, #7
 8005b74:	1ac3      	subs	r3, r0, r3
 8005b76:	d0d3      	beq.n	8005b20 <_malloc_r+0x20>
 8005b78:	425a      	negs	r2, r3
 8005b7a:	50e2      	str	r2, [r4, r3]
 8005b7c:	e7d0      	b.n	8005b20 <_malloc_r+0x20>
 8005b7e:	428c      	cmp	r4, r1
 8005b80:	684b      	ldr	r3, [r1, #4]
 8005b82:	bf16      	itet	ne
 8005b84:	6063      	strne	r3, [r4, #4]
 8005b86:	6013      	streq	r3, [r2, #0]
 8005b88:	460c      	movne	r4, r1
 8005b8a:	e7eb      	b.n	8005b64 <_malloc_r+0x64>
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	6849      	ldr	r1, [r1, #4]
 8005b90:	e7cc      	b.n	8005b2c <_malloc_r+0x2c>
 8005b92:	1cc4      	adds	r4, r0, #3
 8005b94:	f024 0403 	bic.w	r4, r4, #3
 8005b98:	42a0      	cmp	r0, r4
 8005b9a:	d005      	beq.n	8005ba8 <_malloc_r+0xa8>
 8005b9c:	1a21      	subs	r1, r4, r0
 8005b9e:	4630      	mov	r0, r6
 8005ba0:	f000 f82e 	bl	8005c00 <_sbrk_r>
 8005ba4:	3001      	adds	r0, #1
 8005ba6:	d0cf      	beq.n	8005b48 <_malloc_r+0x48>
 8005ba8:	6025      	str	r5, [r4, #0]
 8005baa:	e7db      	b.n	8005b64 <_malloc_r+0x64>
 8005bac:	20000090 	.word	0x20000090
 8005bb0:	20000094 	.word	0x20000094

08005bb4 <_realloc_r>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	4607      	mov	r7, r0
 8005bb8:	4614      	mov	r4, r2
 8005bba:	460e      	mov	r6, r1
 8005bbc:	b921      	cbnz	r1, 8005bc8 <_realloc_r+0x14>
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005bc4:	f7ff bf9c 	b.w	8005b00 <_malloc_r>
 8005bc8:	b922      	cbnz	r2, 8005bd4 <_realloc_r+0x20>
 8005bca:	f7ff ff4b 	bl	8005a64 <_free_r>
 8005bce:	4625      	mov	r5, r4
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd4:	f000 f826 	bl	8005c24 <_malloc_usable_size_r>
 8005bd8:	42a0      	cmp	r0, r4
 8005bda:	d20f      	bcs.n	8005bfc <_realloc_r+0x48>
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4638      	mov	r0, r7
 8005be0:	f7ff ff8e 	bl	8005b00 <_malloc_r>
 8005be4:	4605      	mov	r5, r0
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d0f2      	beq.n	8005bd0 <_realloc_r+0x1c>
 8005bea:	4631      	mov	r1, r6
 8005bec:	4622      	mov	r2, r4
 8005bee:	f7ff ff15 	bl	8005a1c <memcpy>
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	f7ff ff35 	bl	8005a64 <_free_r>
 8005bfa:	e7e9      	b.n	8005bd0 <_realloc_r+0x1c>
 8005bfc:	4635      	mov	r5, r6
 8005bfe:	e7e7      	b.n	8005bd0 <_realloc_r+0x1c>

08005c00 <_sbrk_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4c06      	ldr	r4, [pc, #24]	; (8005c1c <_sbrk_r+0x1c>)
 8005c04:	2300      	movs	r3, #0
 8005c06:	4605      	mov	r5, r0
 8005c08:	4608      	mov	r0, r1
 8005c0a:	6023      	str	r3, [r4, #0]
 8005c0c:	f7fb fae6 	bl	80011dc <_sbrk>
 8005c10:	1c43      	adds	r3, r0, #1
 8005c12:	d102      	bne.n	8005c1a <_sbrk_r+0x1a>
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	b103      	cbz	r3, 8005c1a <_sbrk_r+0x1a>
 8005c18:	602b      	str	r3, [r5, #0]
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	200001b8 	.word	0x200001b8

08005c20 <__malloc_lock>:
 8005c20:	4770      	bx	lr

08005c22 <__malloc_unlock>:
 8005c22:	4770      	bx	lr

08005c24 <_malloc_usable_size_r>:
 8005c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c28:	1f18      	subs	r0, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bfbc      	itt	lt
 8005c2e:	580b      	ldrlt	r3, [r1, r0]
 8005c30:	18c0      	addlt	r0, r0, r3
 8005c32:	4770      	bx	lr

08005c34 <_init>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr

08005c40 <_fini>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr
